// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SubnetIpRange extends pulumi.CustomResource {
    /**
     * Get an existing SubnetIpRange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetIpRangeState, opts?: pulumi.CustomResourceOptions): SubnetIpRange {
        return new SubnetIpRange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'maas:index/subnetIpRange:SubnetIpRange';

    /**
     * Returns true if the given object is an instance of SubnetIpRange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubnetIpRange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubnetIpRange.__pulumiType;
    }

    /**
     * A description of this range. This argument is computed if it's not set.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * The end IP for the new IP range (inclusive).
     */
    public readonly endIp!: pulumi.Output<string>;
    /**
     * The start IP for the new IP range (inclusive).
     */
    public readonly startIp!: pulumi.Output<string>;
    /**
     * The subnet identifier (ID or CIDR) for the new IP range.
     */
    public readonly subnet!: pulumi.Output<string>;
    /**
     * The IP range type. Valid options are: `dynamic`, `reserved`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SubnetIpRange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetIpRangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetIpRangeArgs | SubnetIpRangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetIpRangeState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["endIp"] = state ? state.endIp : undefined;
            resourceInputs["startIp"] = state ? state.startIp : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SubnetIpRangeArgs | undefined;
            if ((!args || args.endIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endIp'");
            }
            if ((!args || args.startIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startIp'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["endIp"] = args ? args.endIp : undefined;
            resourceInputs["startIp"] = args ? args.startIp : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubnetIpRange.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubnetIpRange resources.
 */
export interface SubnetIpRangeState {
    /**
     * A description of this range. This argument is computed if it's not set.
     */
    comment?: pulumi.Input<string>;
    /**
     * The end IP for the new IP range (inclusive).
     */
    endIp?: pulumi.Input<string>;
    /**
     * The start IP for the new IP range (inclusive).
     */
    startIp?: pulumi.Input<string>;
    /**
     * The subnet identifier (ID or CIDR) for the new IP range.
     */
    subnet?: pulumi.Input<string>;
    /**
     * The IP range type. Valid options are: `dynamic`, `reserved`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SubnetIpRange resource.
 */
export interface SubnetIpRangeArgs {
    /**
     * A description of this range. This argument is computed if it's not set.
     */
    comment?: pulumi.Input<string>;
    /**
     * The end IP for the new IP range (inclusive).
     */
    endIp: pulumi.Input<string>;
    /**
     * The start IP for the new IP range (inclusive).
     */
    startIp: pulumi.Input<string>;
    /**
     * The subnet identifier (ID or CIDR) for the new IP range.
     */
    subnet: pulumi.Input<string>;
    /**
     * The IP range type. Valid options are: `dynamic`, `reserved`.
     */
    type: pulumi.Input<string>;
}
