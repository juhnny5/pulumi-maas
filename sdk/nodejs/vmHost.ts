// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VmHost extends pulumi.CustomResource {
    /**
     * Get an existing VmHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmHostState, opts?: pulumi.CustomResourceOptions): VmHost {
        return new VmHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'maas:index/vmHost:VmHost';

    /**
     * Returns true if the given object is an instance of VmHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmHost.__pulumiType;
    }

    /**
     * The new VM host CPU overcommit ratio. This is computed if it's not set.
     */
    public readonly cpuOverCommitRatio!: pulumi.Output<number>;
    /**
     * The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
     * it's not set.
     */
    public readonly defaultMacvlanMode!: pulumi.Output<string>;
    /**
     * The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
     * registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
     */
    public readonly machine!: pulumi.Output<string | undefined>;
    /**
     * The new VM host RAM memory overcommit ratio. This is computed if it's not set.
     */
    public readonly memoryOverCommitRatio!: pulumi.Output<number>;
    /**
     * The new VM host name. This is computed if it's not set.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The new VM host pool name. This is computed if it's not set.
     */
    public readonly pool!: pulumi.Output<string>;
    /**
     * Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
     * given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
     */
    public readonly powerAddress!: pulumi.Output<string | undefined>;
    /**
     * User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
     */
    public readonly powerPass!: pulumi.Output<string | undefined>;
    /**
     * User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
     */
    public readonly powerUser!: pulumi.Output<string | undefined>;
    /**
     * The VM host total number of CPU cores.
     */
    public /*out*/ readonly resourcesCoresTotal!: pulumi.Output<number>;
    /**
     * The VM host total local storage (in bytes).
     */
    public /*out*/ readonly resourcesLocalStorageTotal!: pulumi.Output<number>;
    /**
     * The VM host total RAM memory (in MB).
     */
    public /*out*/ readonly resourcesMemoryTotal!: pulumi.Output<number>;
    /**
     * A set of tag names to assign to the new VM host. This is computed if it's not set.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * The VM host type. Supported values are: `lxd`, `virsh`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The new VM host zone name. This is computed if it's not set.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a VmHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmHostArgs | VmHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmHostState | undefined;
            resourceInputs["cpuOverCommitRatio"] = state ? state.cpuOverCommitRatio : undefined;
            resourceInputs["defaultMacvlanMode"] = state ? state.defaultMacvlanMode : undefined;
            resourceInputs["machine"] = state ? state.machine : undefined;
            resourceInputs["memoryOverCommitRatio"] = state ? state.memoryOverCommitRatio : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["powerAddress"] = state ? state.powerAddress : undefined;
            resourceInputs["powerPass"] = state ? state.powerPass : undefined;
            resourceInputs["powerUser"] = state ? state.powerUser : undefined;
            resourceInputs["resourcesCoresTotal"] = state ? state.resourcesCoresTotal : undefined;
            resourceInputs["resourcesLocalStorageTotal"] = state ? state.resourcesLocalStorageTotal : undefined;
            resourceInputs["resourcesMemoryTotal"] = state ? state.resourcesMemoryTotal : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as VmHostArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cpuOverCommitRatio"] = args ? args.cpuOverCommitRatio : undefined;
            resourceInputs["defaultMacvlanMode"] = args ? args.defaultMacvlanMode : undefined;
            resourceInputs["machine"] = args ? args.machine : undefined;
            resourceInputs["memoryOverCommitRatio"] = args ? args.memoryOverCommitRatio : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["powerAddress"] = args ? args.powerAddress : undefined;
            resourceInputs["powerPass"] = args?.powerPass ? pulumi.secret(args.powerPass) : undefined;
            resourceInputs["powerUser"] = args ? args.powerUser : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["resourcesCoresTotal"] = undefined /*out*/;
            resourceInputs["resourcesLocalStorageTotal"] = undefined /*out*/;
            resourceInputs["resourcesMemoryTotal"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["powerPass"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VmHost.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VmHost resources.
 */
export interface VmHostState {
    /**
     * The new VM host CPU overcommit ratio. This is computed if it's not set.
     */
    cpuOverCommitRatio?: pulumi.Input<number>;
    /**
     * The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
     * it's not set.
     */
    defaultMacvlanMode?: pulumi.Input<string>;
    /**
     * The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
     * registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
     */
    machine?: pulumi.Input<string>;
    /**
     * The new VM host RAM memory overcommit ratio. This is computed if it's not set.
     */
    memoryOverCommitRatio?: pulumi.Input<number>;
    /**
     * The new VM host name. This is computed if it's not set.
     */
    name?: pulumi.Input<string>;
    /**
     * The new VM host pool name. This is computed if it's not set.
     */
    pool?: pulumi.Input<string>;
    /**
     * Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
     * given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
     */
    powerAddress?: pulumi.Input<string>;
    /**
     * User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
     */
    powerPass?: pulumi.Input<string>;
    /**
     * User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
     */
    powerUser?: pulumi.Input<string>;
    /**
     * The VM host total number of CPU cores.
     */
    resourcesCoresTotal?: pulumi.Input<number>;
    /**
     * The VM host total local storage (in bytes).
     */
    resourcesLocalStorageTotal?: pulumi.Input<number>;
    /**
     * The VM host total RAM memory (in MB).
     */
    resourcesMemoryTotal?: pulumi.Input<number>;
    /**
     * A set of tag names to assign to the new VM host. This is computed if it's not set.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The VM host type. Supported values are: `lxd`, `virsh`.
     */
    type?: pulumi.Input<string>;
    /**
     * The new VM host zone name. This is computed if it's not set.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmHost resource.
 */
export interface VmHostArgs {
    /**
     * The new VM host CPU overcommit ratio. This is computed if it's not set.
     */
    cpuOverCommitRatio?: pulumi.Input<number>;
    /**
     * The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
     * it's not set.
     */
    defaultMacvlanMode?: pulumi.Input<string>;
    /**
     * The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
     * registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
     */
    machine?: pulumi.Input<string>;
    /**
     * The new VM host RAM memory overcommit ratio. This is computed if it's not set.
     */
    memoryOverCommitRatio?: pulumi.Input<number>;
    /**
     * The new VM host name. This is computed if it's not set.
     */
    name?: pulumi.Input<string>;
    /**
     * The new VM host pool name. This is computed if it's not set.
     */
    pool?: pulumi.Input<string>;
    /**
     * Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
     * given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
     */
    powerAddress?: pulumi.Input<string>;
    /**
     * User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
     */
    powerPass?: pulumi.Input<string>;
    /**
     * User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
     */
    powerUser?: pulumi.Input<string>;
    /**
     * A set of tag names to assign to the new VM host. This is computed if it's not set.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The VM host type. Supported values are: `lxd`, `virsh`.
     */
    type: pulumi.Input<string>;
    /**
     * The new VM host zone name. This is computed if it's not set.
     */
    zone?: pulumi.Input<string>;
}
