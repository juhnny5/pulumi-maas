// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockDevice extends pulumi.CustomResource {
    /**
     * Get an existing BlockDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockDeviceState, opts?: pulumi.CustomResourceOptions): BlockDevice {
        return new BlockDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'maas:index/blockDevice:BlockDevice';

    /**
     * Returns true if the given object is an instance of BlockDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockDevice.__pulumiType;
    }

    /**
     * The block size of the block device. Defaults to `512`.
     */
    public readonly blockSize!: pulumi.Output<number | undefined>;
    /**
     * Only used if `model` and `serial` cannot be provided. This should be a path that is fixed and doesn't change depending
     * on the boot order or kernel version. This argument is computed if it's not given.
     */
    public readonly idPath!: pulumi.Output<string>;
    /**
     * Boolean value indicating if the block device is set as the boot device.
     */
    public readonly isBootDevice!: pulumi.Output<boolean | undefined>;
    /**
     * The machine identifier (system ID, hostname, or FQDN) that owns the block device.
     */
    public readonly machine!: pulumi.Output<string>;
    /**
     * Model of the block device. Used in conjunction with `serial` argument. Conflicts with `id_path`. This argument is
     * computed if it's not given.
     */
    public readonly model!: pulumi.Output<string>;
    /**
     * The block device name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of partition resources created for the new block device. Parameters defined below. This argument is processed in
     * [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html). And, it is computed if it's
     * not given.
     */
    public readonly partitions!: pulumi.Output<outputs.BlockDevicePartition[]>;
    /**
     * Block device path.
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Serial number of the block device. Used in conjunction with `model` argument. Conflicts with `id_path`. This argument is
     * computed if it's not given.
     */
    public readonly serial!: pulumi.Output<string>;
    /**
     * The size of the block device (given in GB).
     */
    public readonly sizeGigabytes!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Block device UUID.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a BlockDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockDeviceArgs | BlockDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockDeviceState | undefined;
            resourceInputs["blockSize"] = state ? state.blockSize : undefined;
            resourceInputs["idPath"] = state ? state.idPath : undefined;
            resourceInputs["isBootDevice"] = state ? state.isBootDevice : undefined;
            resourceInputs["machine"] = state ? state.machine : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitions"] = state ? state.partitions : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["sizeGigabytes"] = state ? state.sizeGigabytes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as BlockDeviceArgs | undefined;
            if ((!args || args.machine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machine'");
            }
            if ((!args || args.sizeGigabytes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sizeGigabytes'");
            }
            resourceInputs["blockSize"] = args ? args.blockSize : undefined;
            resourceInputs["idPath"] = args ? args.idPath : undefined;
            resourceInputs["isBootDevice"] = args ? args.isBootDevice : undefined;
            resourceInputs["machine"] = args ? args.machine : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partitions"] = args ? args.partitions : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["sizeGigabytes"] = args ? args.sizeGigabytes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockDevice.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BlockDevice resources.
 */
export interface BlockDeviceState {
    /**
     * The block size of the block device. Defaults to `512`.
     */
    blockSize?: pulumi.Input<number>;
    /**
     * Only used if `model` and `serial` cannot be provided. This should be a path that is fixed and doesn't change depending
     * on the boot order or kernel version. This argument is computed if it's not given.
     */
    idPath?: pulumi.Input<string>;
    /**
     * Boolean value indicating if the block device is set as the boot device.
     */
    isBootDevice?: pulumi.Input<boolean>;
    /**
     * The machine identifier (system ID, hostname, or FQDN) that owns the block device.
     */
    machine?: pulumi.Input<string>;
    /**
     * Model of the block device. Used in conjunction with `serial` argument. Conflicts with `id_path`. This argument is
     * computed if it's not given.
     */
    model?: pulumi.Input<string>;
    /**
     * The block device name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of partition resources created for the new block device. Parameters defined below. This argument is processed in
     * [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html). And, it is computed if it's
     * not given.
     */
    partitions?: pulumi.Input<pulumi.Input<inputs.BlockDevicePartition>[]>;
    /**
     * Block device path.
     */
    path?: pulumi.Input<string>;
    /**
     * Serial number of the block device. Used in conjunction with `model` argument. Conflicts with `id_path`. This argument is
     * computed if it's not given.
     */
    serial?: pulumi.Input<string>;
    /**
     * The size of the block device (given in GB).
     */
    sizeGigabytes?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Block device UUID.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockDevice resource.
 */
export interface BlockDeviceArgs {
    /**
     * The block size of the block device. Defaults to `512`.
     */
    blockSize?: pulumi.Input<number>;
    /**
     * Only used if `model` and `serial` cannot be provided. This should be a path that is fixed and doesn't change depending
     * on the boot order or kernel version. This argument is computed if it's not given.
     */
    idPath?: pulumi.Input<string>;
    /**
     * Boolean value indicating if the block device is set as the boot device.
     */
    isBootDevice?: pulumi.Input<boolean>;
    /**
     * The machine identifier (system ID, hostname, or FQDN) that owns the block device.
     */
    machine: pulumi.Input<string>;
    /**
     * Model of the block device. Used in conjunction with `serial` argument. Conflicts with `id_path`. This argument is
     * computed if it's not given.
     */
    model?: pulumi.Input<string>;
    /**
     * The block device name.
     */
    name?: pulumi.Input<string>;
    /**
     * List of partition resources created for the new block device. Parameters defined below. This argument is processed in
     * [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html). And, it is computed if it's
     * not given.
     */
    partitions?: pulumi.Input<pulumi.Input<inputs.BlockDevicePartition>[]>;
    /**
     * Serial number of the block device. Used in conjunction with `model` argument. Conflicts with `id_path`. This argument is
     * computed if it's not given.
     */
    serial?: pulumi.Input<string>;
    /**
     * The size of the block device (given in GB).
     */
    sizeGigabytes: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
