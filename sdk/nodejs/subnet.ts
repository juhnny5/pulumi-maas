// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'maas:index/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    /**
     * Boolean value that indicates if the MAAS DNS resolution is enabled for this subnet. Defaults to `true`.
     */
    public readonly allowDns!: pulumi.Output<boolean | undefined>;
    /**
     * Boolean value that indicates if `maas-proxy` allows requests from this subnet. Defaults to `true`.
     */
    public readonly allowProxy!: pulumi.Output<boolean | undefined>;
    /**
     * The subnet CIDR.
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * List of IP addresses set as DNS servers for the new subnet. This argument is computed if it's not set.
     */
    public readonly dnsServers!: pulumi.Output<string[]>;
    /**
     * The fabric identifier (ID or name) for the new subnet.
     */
    public readonly fabric!: pulumi.Output<string | undefined>;
    /**
     * Gateway IP address for the new subnet. This argument is computed if it's not set.
     */
    public readonly gatewayIp!: pulumi.Output<string>;
    /**
     * A set of IP ranges configured on the new subnet. Parameters defined below. This argument is processed in
     * [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
     */
    public readonly ipRanges!: pulumi.Output<outputs.SubnetIpRange[] | undefined>;
    /**
     * The subnet name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * How reverse DNS is handled for this subnet. Defaults to `2`. Valid options are: * `0` - Disabled, no reverse zone is
     * created. * `1` - Enabled, generate reverse zone. * `2` - RFC2317, extends `1` to create the necessary parent zone with
     * the appropriate CNAME resource records for the network, if the network is small enough to require the support described
     * in RFC2317.
     */
    public readonly rdnsMode!: pulumi.Output<number | undefined>;
    /**
     * The VLAN identifier (ID or traffic segregation ID) for the new subnet. If this is set, the `fabric` argument is
     * required.
     */
    public readonly vlan!: pulumi.Output<string | undefined>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["allowDns"] = state ? state.allowDns : undefined;
            resourceInputs["allowProxy"] = state ? state.allowProxy : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["fabric"] = state ? state.fabric : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["ipRanges"] = state ? state.ipRanges : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rdnsMode"] = state ? state.rdnsMode : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            resourceInputs["allowDns"] = args ? args.allowDns : undefined;
            resourceInputs["allowProxy"] = args ? args.allowProxy : undefined;
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["fabric"] = args ? args.fabric : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["ipRanges"] = args ? args.ipRanges : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rdnsMode"] = args ? args.rdnsMode : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * Boolean value that indicates if the MAAS DNS resolution is enabled for this subnet. Defaults to `true`.
     */
    allowDns?: pulumi.Input<boolean>;
    /**
     * Boolean value that indicates if `maas-proxy` allows requests from this subnet. Defaults to `true`.
     */
    allowProxy?: pulumi.Input<boolean>;
    /**
     * The subnet CIDR.
     */
    cidr?: pulumi.Input<string>;
    /**
     * List of IP addresses set as DNS servers for the new subnet. This argument is computed if it's not set.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fabric identifier (ID or name) for the new subnet.
     */
    fabric?: pulumi.Input<string>;
    /**
     * Gateway IP address for the new subnet. This argument is computed if it's not set.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * A set of IP ranges configured on the new subnet. Parameters defined below. This argument is processed in
     * [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.SubnetIpRange>[]>;
    /**
     * The subnet name.
     */
    name?: pulumi.Input<string>;
    /**
     * How reverse DNS is handled for this subnet. Defaults to `2`. Valid options are: * `0` - Disabled, no reverse zone is
     * created. * `1` - Enabled, generate reverse zone. * `2` - RFC2317, extends `1` to create the necessary parent zone with
     * the appropriate CNAME resource records for the network, if the network is small enough to require the support described
     * in RFC2317.
     */
    rdnsMode?: pulumi.Input<number>;
    /**
     * The VLAN identifier (ID or traffic segregation ID) for the new subnet. If this is set, the `fabric` argument is
     * required.
     */
    vlan?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * Boolean value that indicates if the MAAS DNS resolution is enabled for this subnet. Defaults to `true`.
     */
    allowDns?: pulumi.Input<boolean>;
    /**
     * Boolean value that indicates if `maas-proxy` allows requests from this subnet. Defaults to `true`.
     */
    allowProxy?: pulumi.Input<boolean>;
    /**
     * The subnet CIDR.
     */
    cidr: pulumi.Input<string>;
    /**
     * List of IP addresses set as DNS servers for the new subnet. This argument is computed if it's not set.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The fabric identifier (ID or name) for the new subnet.
     */
    fabric?: pulumi.Input<string>;
    /**
     * Gateway IP address for the new subnet. This argument is computed if it's not set.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * A set of IP ranges configured on the new subnet. Parameters defined below. This argument is processed in
     * [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
     */
    ipRanges?: pulumi.Input<pulumi.Input<inputs.SubnetIpRange>[]>;
    /**
     * The subnet name.
     */
    name?: pulumi.Input<string>;
    /**
     * How reverse DNS is handled for this subnet. Defaults to `2`. Valid options are: * `0` - Disabled, no reverse zone is
     * created. * `1` - Enabled, generate reverse zone. * `2` - RFC2317, extends `1` to create the necessary parent zone with
     * the appropriate CNAME resource records for the network, if the network is small enough to require the support described
     * in RFC2317.
     */
    rdnsMode?: pulumi.Input<number>;
    /**
     * The VLAN identifier (ID or traffic segregation ID) for the new subnet. If this is set, the `fabric` argument is
     * required.
     */
    vlan?: pulumi.Input<string>;
}
