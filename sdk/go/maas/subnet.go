// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maas

import (
	"context"
	"reflect"

	"errors"
	"github.com/juhnny5/pulumi-maas/sdk/go/maas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Subnet struct {
	pulumi.CustomResourceState

	// Boolean value that indicates if the MAAS DNS resolution is enabled for this subnet. Defaults to `true`.
	AllowDns pulumi.BoolPtrOutput `pulumi:"allowDns"`
	// Boolean value that indicates if `maas-proxy` allows requests from this subnet. Defaults to `true`.
	AllowProxy pulumi.BoolPtrOutput `pulumi:"allowProxy"`
	// The subnet CIDR.
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// List of IP addresses set as DNS servers for the new subnet. This argument is computed if it's not set.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// The fabric identifier (ID or name) for the new subnet.
	Fabric pulumi.StringPtrOutput `pulumi:"fabric"`
	// Gateway IP address for the new subnet. This argument is computed if it's not set.
	GatewayIp pulumi.StringOutput `pulumi:"gatewayIp"`
	// A set of IP ranges configured on the new subnet. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	IpRanges SubnetIpRangeTypeArrayOutput `pulumi:"ipRanges"`
	// The subnet name.
	Name pulumi.StringOutput `pulumi:"name"`
	// How reverse DNS is handled for this subnet. Defaults to `2`. Valid options are: * `0` - Disabled, no reverse zone is
	// created. * `1` - Enabled, generate reverse zone. * `2` - RFC2317, extends `1` to create the necessary parent zone with
	// the appropriate CNAME resource records for the network, if the network is small enough to require the support described
	// in RFC2317.
	RdnsMode pulumi.IntPtrOutput `pulumi:"rdnsMode"`
	// The VLAN identifier (ID or traffic segregation ID) for the new subnet. If this is set, the `fabric` argument is
	// required.
	Vlan pulumi.StringPtrOutput `pulumi:"vlan"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("maas:index/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("maas:index/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// Boolean value that indicates if the MAAS DNS resolution is enabled for this subnet. Defaults to `true`.
	AllowDns *bool `pulumi:"allowDns"`
	// Boolean value that indicates if `maas-proxy` allows requests from this subnet. Defaults to `true`.
	AllowProxy *bool `pulumi:"allowProxy"`
	// The subnet CIDR.
	Cidr *string `pulumi:"cidr"`
	// List of IP addresses set as DNS servers for the new subnet. This argument is computed if it's not set.
	DnsServers []string `pulumi:"dnsServers"`
	// The fabric identifier (ID or name) for the new subnet.
	Fabric *string `pulumi:"fabric"`
	// Gateway IP address for the new subnet. This argument is computed if it's not set.
	GatewayIp *string `pulumi:"gatewayIp"`
	// A set of IP ranges configured on the new subnet. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	IpRanges []SubnetIpRangeType `pulumi:"ipRanges"`
	// The subnet name.
	Name *string `pulumi:"name"`
	// How reverse DNS is handled for this subnet. Defaults to `2`. Valid options are: * `0` - Disabled, no reverse zone is
	// created. * `1` - Enabled, generate reverse zone. * `2` - RFC2317, extends `1` to create the necessary parent zone with
	// the appropriate CNAME resource records for the network, if the network is small enough to require the support described
	// in RFC2317.
	RdnsMode *int `pulumi:"rdnsMode"`
	// The VLAN identifier (ID or traffic segregation ID) for the new subnet. If this is set, the `fabric` argument is
	// required.
	Vlan *string `pulumi:"vlan"`
}

type SubnetState struct {
	// Boolean value that indicates if the MAAS DNS resolution is enabled for this subnet. Defaults to `true`.
	AllowDns pulumi.BoolPtrInput
	// Boolean value that indicates if `maas-proxy` allows requests from this subnet. Defaults to `true`.
	AllowProxy pulumi.BoolPtrInput
	// The subnet CIDR.
	Cidr pulumi.StringPtrInput
	// List of IP addresses set as DNS servers for the new subnet. This argument is computed if it's not set.
	DnsServers pulumi.StringArrayInput
	// The fabric identifier (ID or name) for the new subnet.
	Fabric pulumi.StringPtrInput
	// Gateway IP address for the new subnet. This argument is computed if it's not set.
	GatewayIp pulumi.StringPtrInput
	// A set of IP ranges configured on the new subnet. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	IpRanges SubnetIpRangeTypeArrayInput
	// The subnet name.
	Name pulumi.StringPtrInput
	// How reverse DNS is handled for this subnet. Defaults to `2`. Valid options are: * `0` - Disabled, no reverse zone is
	// created. * `1` - Enabled, generate reverse zone. * `2` - RFC2317, extends `1` to create the necessary parent zone with
	// the appropriate CNAME resource records for the network, if the network is small enough to require the support described
	// in RFC2317.
	RdnsMode pulumi.IntPtrInput
	// The VLAN identifier (ID or traffic segregation ID) for the new subnet. If this is set, the `fabric` argument is
	// required.
	Vlan pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// Boolean value that indicates if the MAAS DNS resolution is enabled for this subnet. Defaults to `true`.
	AllowDns *bool `pulumi:"allowDns"`
	// Boolean value that indicates if `maas-proxy` allows requests from this subnet. Defaults to `true`.
	AllowProxy *bool `pulumi:"allowProxy"`
	// The subnet CIDR.
	Cidr string `pulumi:"cidr"`
	// List of IP addresses set as DNS servers for the new subnet. This argument is computed if it's not set.
	DnsServers []string `pulumi:"dnsServers"`
	// The fabric identifier (ID or name) for the new subnet.
	Fabric *string `pulumi:"fabric"`
	// Gateway IP address for the new subnet. This argument is computed if it's not set.
	GatewayIp *string `pulumi:"gatewayIp"`
	// A set of IP ranges configured on the new subnet. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	IpRanges []SubnetIpRangeType `pulumi:"ipRanges"`
	// The subnet name.
	Name *string `pulumi:"name"`
	// How reverse DNS is handled for this subnet. Defaults to `2`. Valid options are: * `0` - Disabled, no reverse zone is
	// created. * `1` - Enabled, generate reverse zone. * `2` - RFC2317, extends `1` to create the necessary parent zone with
	// the appropriate CNAME resource records for the network, if the network is small enough to require the support described
	// in RFC2317.
	RdnsMode *int `pulumi:"rdnsMode"`
	// The VLAN identifier (ID or traffic segregation ID) for the new subnet. If this is set, the `fabric` argument is
	// required.
	Vlan *string `pulumi:"vlan"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// Boolean value that indicates if the MAAS DNS resolution is enabled for this subnet. Defaults to `true`.
	AllowDns pulumi.BoolPtrInput
	// Boolean value that indicates if `maas-proxy` allows requests from this subnet. Defaults to `true`.
	AllowProxy pulumi.BoolPtrInput
	// The subnet CIDR.
	Cidr pulumi.StringInput
	// List of IP addresses set as DNS servers for the new subnet. This argument is computed if it's not set.
	DnsServers pulumi.StringArrayInput
	// The fabric identifier (ID or name) for the new subnet.
	Fabric pulumi.StringPtrInput
	// Gateway IP address for the new subnet. This argument is computed if it's not set.
	GatewayIp pulumi.StringPtrInput
	// A set of IP ranges configured on the new subnet. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
	IpRanges SubnetIpRangeTypeArrayInput
	// The subnet name.
	Name pulumi.StringPtrInput
	// How reverse DNS is handled for this subnet. Defaults to `2`. Valid options are: * `0` - Disabled, no reverse zone is
	// created. * `1` - Enabled, generate reverse zone. * `2` - RFC2317, extends `1` to create the necessary parent zone with
	// the appropriate CNAME resource records for the network, if the network is small enough to require the support described
	// in RFC2317.
	RdnsMode pulumi.IntPtrInput
	// The VLAN identifier (ID or traffic segregation ID) for the new subnet. If this is set, the `fabric` argument is
	// required.
	Vlan pulumi.StringPtrInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// Boolean value that indicates if the MAAS DNS resolution is enabled for this subnet. Defaults to `true`.
func (o SubnetOutput) AllowDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.AllowDns }).(pulumi.BoolPtrOutput)
}

// Boolean value that indicates if `maas-proxy` allows requests from this subnet. Defaults to `true`.
func (o SubnetOutput) AllowProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.AllowProxy }).(pulumi.BoolPtrOutput)
}

// The subnet CIDR.
func (o SubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// List of IP addresses set as DNS servers for the new subnet. This argument is computed if it's not set.
func (o SubnetOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// The fabric identifier (ID or name) for the new subnet.
func (o SubnetOutput) Fabric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Fabric }).(pulumi.StringPtrOutput)
}

// Gateway IP address for the new subnet. This argument is computed if it's not set.
func (o SubnetOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// A set of IP ranges configured on the new subnet. Parameters defined below. This argument is processed in
// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).
func (o SubnetOutput) IpRanges() SubnetIpRangeTypeArrayOutput {
	return o.ApplyT(func(v *Subnet) SubnetIpRangeTypeArrayOutput { return v.IpRanges }).(SubnetIpRangeTypeArrayOutput)
}

// The subnet name.
func (o SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// How reverse DNS is handled for this subnet. Defaults to `2`. Valid options are: * `0` - Disabled, no reverse zone is
// created. * `1` - Enabled, generate reverse zone. * `2` - RFC2317, extends `1` to create the necessary parent zone with
// the appropriate CNAME resource records for the network, if the network is small enough to require the support described
// in RFC2317.
func (o SubnetOutput) RdnsMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.RdnsMode }).(pulumi.IntPtrOutput)
}

// The VLAN identifier (ID or traffic segregation ID) for the new subnet. If this is set, the `fabric` argument is
// required.
func (o SubnetOutput) Vlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Vlan }).(pulumi.StringPtrOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
