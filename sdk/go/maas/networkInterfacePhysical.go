// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maas

import (
	"context"
	"reflect"

	"errors"
	"github.com/juhnny5/pulumi-maas/sdk/go/maas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkInterfacePhysical struct {
	pulumi.CustomResourceState

	// The physical network interface MAC address.
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// The identifier (system ID, hostname, or FQDN) of the machine with the physical network interface.
	Machine pulumi.StringOutput `pulumi:"machine"`
	// The MTU of the physical network interface. This argument is computed if it's not set.
	Mtu pulumi.IntOutput `pulumi:"mtu"`
	// The physical network interface name. This argument is computed if it's not set.
	Name pulumi.StringOutput `pulumi:"name"`
	// A set of tag names to be assigned to the physical network interface. This argument is computed if it's not set.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// VLAN the physical network interface is connected to. Defaults to `untagged`.
	Vlan pulumi.StringPtrOutput `pulumi:"vlan"`
}

// NewNetworkInterfacePhysical registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterfacePhysical(ctx *pulumi.Context,
	name string, args *NetworkInterfacePhysicalArgs, opts ...pulumi.ResourceOption) (*NetworkInterfacePhysical, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MacAddress == nil {
		return nil, errors.New("invalid value for required argument 'MacAddress'")
	}
	if args.Machine == nil {
		return nil, errors.New("invalid value for required argument 'Machine'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInterfacePhysical
	err := ctx.RegisterResource("maas:index/networkInterfacePhysical:NetworkInterfacePhysical", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterfacePhysical gets an existing NetworkInterfacePhysical resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterfacePhysical(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfacePhysicalState, opts ...pulumi.ResourceOption) (*NetworkInterfacePhysical, error) {
	var resource NetworkInterfacePhysical
	err := ctx.ReadResource("maas:index/networkInterfacePhysical:NetworkInterfacePhysical", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterfacePhysical resources.
type networkInterfacePhysicalState struct {
	// The physical network interface MAC address.
	MacAddress *string `pulumi:"macAddress"`
	// The identifier (system ID, hostname, or FQDN) of the machine with the physical network interface.
	Machine *string `pulumi:"machine"`
	// The MTU of the physical network interface. This argument is computed if it's not set.
	Mtu *int `pulumi:"mtu"`
	// The physical network interface name. This argument is computed if it's not set.
	Name *string `pulumi:"name"`
	// A set of tag names to be assigned to the physical network interface. This argument is computed if it's not set.
	Tags []string `pulumi:"tags"`
	// VLAN the physical network interface is connected to. Defaults to `untagged`.
	Vlan *string `pulumi:"vlan"`
}

type NetworkInterfacePhysicalState struct {
	// The physical network interface MAC address.
	MacAddress pulumi.StringPtrInput
	// The identifier (system ID, hostname, or FQDN) of the machine with the physical network interface.
	Machine pulumi.StringPtrInput
	// The MTU of the physical network interface. This argument is computed if it's not set.
	Mtu pulumi.IntPtrInput
	// The physical network interface name. This argument is computed if it's not set.
	Name pulumi.StringPtrInput
	// A set of tag names to be assigned to the physical network interface. This argument is computed if it's not set.
	Tags pulumi.StringArrayInput
	// VLAN the physical network interface is connected to. Defaults to `untagged`.
	Vlan pulumi.StringPtrInput
}

func (NetworkInterfacePhysicalState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfacePhysicalState)(nil)).Elem()
}

type networkInterfacePhysicalArgs struct {
	// The physical network interface MAC address.
	MacAddress string `pulumi:"macAddress"`
	// The identifier (system ID, hostname, or FQDN) of the machine with the physical network interface.
	Machine string `pulumi:"machine"`
	// The MTU of the physical network interface. This argument is computed if it's not set.
	Mtu *int `pulumi:"mtu"`
	// The physical network interface name. This argument is computed if it's not set.
	Name *string `pulumi:"name"`
	// A set of tag names to be assigned to the physical network interface. This argument is computed if it's not set.
	Tags []string `pulumi:"tags"`
	// VLAN the physical network interface is connected to. Defaults to `untagged`.
	Vlan *string `pulumi:"vlan"`
}

// The set of arguments for constructing a NetworkInterfacePhysical resource.
type NetworkInterfacePhysicalArgs struct {
	// The physical network interface MAC address.
	MacAddress pulumi.StringInput
	// The identifier (system ID, hostname, or FQDN) of the machine with the physical network interface.
	Machine pulumi.StringInput
	// The MTU of the physical network interface. This argument is computed if it's not set.
	Mtu pulumi.IntPtrInput
	// The physical network interface name. This argument is computed if it's not set.
	Name pulumi.StringPtrInput
	// A set of tag names to be assigned to the physical network interface. This argument is computed if it's not set.
	Tags pulumi.StringArrayInput
	// VLAN the physical network interface is connected to. Defaults to `untagged`.
	Vlan pulumi.StringPtrInput
}

func (NetworkInterfacePhysicalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfacePhysicalArgs)(nil)).Elem()
}

type NetworkInterfacePhysicalInput interface {
	pulumi.Input

	ToNetworkInterfacePhysicalOutput() NetworkInterfacePhysicalOutput
	ToNetworkInterfacePhysicalOutputWithContext(ctx context.Context) NetworkInterfacePhysicalOutput
}

func (*NetworkInterfacePhysical) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfacePhysical)(nil)).Elem()
}

func (i *NetworkInterfacePhysical) ToNetworkInterfacePhysicalOutput() NetworkInterfacePhysicalOutput {
	return i.ToNetworkInterfacePhysicalOutputWithContext(context.Background())
}

func (i *NetworkInterfacePhysical) ToNetworkInterfacePhysicalOutputWithContext(ctx context.Context) NetworkInterfacePhysicalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfacePhysicalOutput)
}

// NetworkInterfacePhysicalArrayInput is an input type that accepts NetworkInterfacePhysicalArray and NetworkInterfacePhysicalArrayOutput values.
// You can construct a concrete instance of `NetworkInterfacePhysicalArrayInput` via:
//
//	NetworkInterfacePhysicalArray{ NetworkInterfacePhysicalArgs{...} }
type NetworkInterfacePhysicalArrayInput interface {
	pulumi.Input

	ToNetworkInterfacePhysicalArrayOutput() NetworkInterfacePhysicalArrayOutput
	ToNetworkInterfacePhysicalArrayOutputWithContext(context.Context) NetworkInterfacePhysicalArrayOutput
}

type NetworkInterfacePhysicalArray []NetworkInterfacePhysicalInput

func (NetworkInterfacePhysicalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterfacePhysical)(nil)).Elem()
}

func (i NetworkInterfacePhysicalArray) ToNetworkInterfacePhysicalArrayOutput() NetworkInterfacePhysicalArrayOutput {
	return i.ToNetworkInterfacePhysicalArrayOutputWithContext(context.Background())
}

func (i NetworkInterfacePhysicalArray) ToNetworkInterfacePhysicalArrayOutputWithContext(ctx context.Context) NetworkInterfacePhysicalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfacePhysicalArrayOutput)
}

// NetworkInterfacePhysicalMapInput is an input type that accepts NetworkInterfacePhysicalMap and NetworkInterfacePhysicalMapOutput values.
// You can construct a concrete instance of `NetworkInterfacePhysicalMapInput` via:
//
//	NetworkInterfacePhysicalMap{ "key": NetworkInterfacePhysicalArgs{...} }
type NetworkInterfacePhysicalMapInput interface {
	pulumi.Input

	ToNetworkInterfacePhysicalMapOutput() NetworkInterfacePhysicalMapOutput
	ToNetworkInterfacePhysicalMapOutputWithContext(context.Context) NetworkInterfacePhysicalMapOutput
}

type NetworkInterfacePhysicalMap map[string]NetworkInterfacePhysicalInput

func (NetworkInterfacePhysicalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterfacePhysical)(nil)).Elem()
}

func (i NetworkInterfacePhysicalMap) ToNetworkInterfacePhysicalMapOutput() NetworkInterfacePhysicalMapOutput {
	return i.ToNetworkInterfacePhysicalMapOutputWithContext(context.Background())
}

func (i NetworkInterfacePhysicalMap) ToNetworkInterfacePhysicalMapOutputWithContext(ctx context.Context) NetworkInterfacePhysicalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfacePhysicalMapOutput)
}

type NetworkInterfacePhysicalOutput struct{ *pulumi.OutputState }

func (NetworkInterfacePhysicalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfacePhysical)(nil)).Elem()
}

func (o NetworkInterfacePhysicalOutput) ToNetworkInterfacePhysicalOutput() NetworkInterfacePhysicalOutput {
	return o
}

func (o NetworkInterfacePhysicalOutput) ToNetworkInterfacePhysicalOutputWithContext(ctx context.Context) NetworkInterfacePhysicalOutput {
	return o
}

// The physical network interface MAC address.
func (o NetworkInterfacePhysicalOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfacePhysical) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// The identifier (system ID, hostname, or FQDN) of the machine with the physical network interface.
func (o NetworkInterfacePhysicalOutput) Machine() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfacePhysical) pulumi.StringOutput { return v.Machine }).(pulumi.StringOutput)
}

// The MTU of the physical network interface. This argument is computed if it's not set.
func (o NetworkInterfacePhysicalOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkInterfacePhysical) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

// The physical network interface name. This argument is computed if it's not set.
func (o NetworkInterfacePhysicalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfacePhysical) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A set of tag names to be assigned to the physical network interface. This argument is computed if it's not set.
func (o NetworkInterfacePhysicalOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkInterfacePhysical) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// VLAN the physical network interface is connected to. Defaults to `untagged`.
func (o NetworkInterfacePhysicalOutput) Vlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkInterfacePhysical) pulumi.StringPtrOutput { return v.Vlan }).(pulumi.StringPtrOutput)
}

type NetworkInterfacePhysicalArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfacePhysicalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterfacePhysical)(nil)).Elem()
}

func (o NetworkInterfacePhysicalArrayOutput) ToNetworkInterfacePhysicalArrayOutput() NetworkInterfacePhysicalArrayOutput {
	return o
}

func (o NetworkInterfacePhysicalArrayOutput) ToNetworkInterfacePhysicalArrayOutputWithContext(ctx context.Context) NetworkInterfacePhysicalArrayOutput {
	return o
}

func (o NetworkInterfacePhysicalArrayOutput) Index(i pulumi.IntInput) NetworkInterfacePhysicalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkInterfacePhysical {
		return vs[0].([]*NetworkInterfacePhysical)[vs[1].(int)]
	}).(NetworkInterfacePhysicalOutput)
}

type NetworkInterfacePhysicalMapOutput struct{ *pulumi.OutputState }

func (NetworkInterfacePhysicalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterfacePhysical)(nil)).Elem()
}

func (o NetworkInterfacePhysicalMapOutput) ToNetworkInterfacePhysicalMapOutput() NetworkInterfacePhysicalMapOutput {
	return o
}

func (o NetworkInterfacePhysicalMapOutput) ToNetworkInterfacePhysicalMapOutputWithContext(ctx context.Context) NetworkInterfacePhysicalMapOutput {
	return o
}

func (o NetworkInterfacePhysicalMapOutput) MapIndex(k pulumi.StringInput) NetworkInterfacePhysicalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkInterfacePhysical {
		return vs[0].(map[string]*NetworkInterfacePhysical)[vs[1].(string)]
	}).(NetworkInterfacePhysicalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfacePhysicalInput)(nil)).Elem(), &NetworkInterfacePhysical{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfacePhysicalArrayInput)(nil)).Elem(), NetworkInterfacePhysicalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfacePhysicalMapInput)(nil)).Elem(), NetworkInterfacePhysicalMap{})
	pulumi.RegisterOutputType(NetworkInterfacePhysicalOutput{})
	pulumi.RegisterOutputType(NetworkInterfacePhysicalArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfacePhysicalMapOutput{})
}
