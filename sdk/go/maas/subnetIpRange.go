// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maas

import (
	"context"
	"reflect"

	"errors"
	"github.com/juhnny5/pulumi-maas/sdk/go/maas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SubnetIpRange struct {
	pulumi.CustomResourceState

	// A description of this range. This argument is computed if it's not set.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// The end IP for the new IP range (inclusive).
	EndIp pulumi.StringOutput `pulumi:"endIp"`
	// The start IP for the new IP range (inclusive).
	StartIp pulumi.StringOutput `pulumi:"startIp"`
	// The subnet identifier (ID or CIDR) for the new IP range.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// The IP range type. Valid options are: `dynamic`, `reserved`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSubnetIpRange registers a new resource with the given unique name, arguments, and options.
func NewSubnetIpRange(ctx *pulumi.Context,
	name string, args *SubnetIpRangeArgs, opts ...pulumi.ResourceOption) (*SubnetIpRange, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndIp == nil {
		return nil, errors.New("invalid value for required argument 'EndIp'")
	}
	if args.StartIp == nil {
		return nil, errors.New("invalid value for required argument 'StartIp'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubnetIpRange
	err := ctx.RegisterResource("maas:index/subnetIpRange:SubnetIpRange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetIpRange gets an existing SubnetIpRange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetIpRange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetIpRangeState, opts ...pulumi.ResourceOption) (*SubnetIpRange, error) {
	var resource SubnetIpRange
	err := ctx.ReadResource("maas:index/subnetIpRange:SubnetIpRange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubnetIpRange resources.
type subnetIpRangeState struct {
	// A description of this range. This argument is computed if it's not set.
	Comment *string `pulumi:"comment"`
	// The end IP for the new IP range (inclusive).
	EndIp *string `pulumi:"endIp"`
	// The start IP for the new IP range (inclusive).
	StartIp *string `pulumi:"startIp"`
	// The subnet identifier (ID or CIDR) for the new IP range.
	Subnet *string `pulumi:"subnet"`
	// The IP range type. Valid options are: `dynamic`, `reserved`.
	Type *string `pulumi:"type"`
}

type SubnetIpRangeState struct {
	// A description of this range. This argument is computed if it's not set.
	Comment pulumi.StringPtrInput
	// The end IP for the new IP range (inclusive).
	EndIp pulumi.StringPtrInput
	// The start IP for the new IP range (inclusive).
	StartIp pulumi.StringPtrInput
	// The subnet identifier (ID or CIDR) for the new IP range.
	Subnet pulumi.StringPtrInput
	// The IP range type. Valid options are: `dynamic`, `reserved`.
	Type pulumi.StringPtrInput
}

func (SubnetIpRangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetIpRangeState)(nil)).Elem()
}

type subnetIpRangeArgs struct {
	// A description of this range. This argument is computed if it's not set.
	Comment *string `pulumi:"comment"`
	// The end IP for the new IP range (inclusive).
	EndIp string `pulumi:"endIp"`
	// The start IP for the new IP range (inclusive).
	StartIp string `pulumi:"startIp"`
	// The subnet identifier (ID or CIDR) for the new IP range.
	Subnet string `pulumi:"subnet"`
	// The IP range type. Valid options are: `dynamic`, `reserved`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a SubnetIpRange resource.
type SubnetIpRangeArgs struct {
	// A description of this range. This argument is computed if it's not set.
	Comment pulumi.StringPtrInput
	// The end IP for the new IP range (inclusive).
	EndIp pulumi.StringInput
	// The start IP for the new IP range (inclusive).
	StartIp pulumi.StringInput
	// The subnet identifier (ID or CIDR) for the new IP range.
	Subnet pulumi.StringInput
	// The IP range type. Valid options are: `dynamic`, `reserved`.
	Type pulumi.StringInput
}

func (SubnetIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetIpRangeArgs)(nil)).Elem()
}

type SubnetIpRangeInput interface {
	pulumi.Input

	ToSubnetIpRangeOutput() SubnetIpRangeOutput
	ToSubnetIpRangeOutputWithContext(ctx context.Context) SubnetIpRangeOutput
}

func (*SubnetIpRange) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetIpRange)(nil)).Elem()
}

func (i *SubnetIpRange) ToSubnetIpRangeOutput() SubnetIpRangeOutput {
	return i.ToSubnetIpRangeOutputWithContext(context.Background())
}

func (i *SubnetIpRange) ToSubnetIpRangeOutputWithContext(ctx context.Context) SubnetIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetIpRangeOutput)
}

// SubnetIpRangeArrayInput is an input type that accepts SubnetIpRangeArray and SubnetIpRangeArrayOutput values.
// You can construct a concrete instance of `SubnetIpRangeArrayInput` via:
//
//	SubnetIpRangeArray{ SubnetIpRangeArgs{...} }
type SubnetIpRangeArrayInput interface {
	pulumi.Input

	ToSubnetIpRangeArrayOutput() SubnetIpRangeArrayOutput
	ToSubnetIpRangeArrayOutputWithContext(context.Context) SubnetIpRangeArrayOutput
}

type SubnetIpRangeArray []SubnetIpRangeInput

func (SubnetIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetIpRange)(nil)).Elem()
}

func (i SubnetIpRangeArray) ToSubnetIpRangeArrayOutput() SubnetIpRangeArrayOutput {
	return i.ToSubnetIpRangeArrayOutputWithContext(context.Background())
}

func (i SubnetIpRangeArray) ToSubnetIpRangeArrayOutputWithContext(ctx context.Context) SubnetIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetIpRangeArrayOutput)
}

// SubnetIpRangeMapInput is an input type that accepts SubnetIpRangeMap and SubnetIpRangeMapOutput values.
// You can construct a concrete instance of `SubnetIpRangeMapInput` via:
//
//	SubnetIpRangeMap{ "key": SubnetIpRangeArgs{...} }
type SubnetIpRangeMapInput interface {
	pulumi.Input

	ToSubnetIpRangeMapOutput() SubnetIpRangeMapOutput
	ToSubnetIpRangeMapOutputWithContext(context.Context) SubnetIpRangeMapOutput
}

type SubnetIpRangeMap map[string]SubnetIpRangeInput

func (SubnetIpRangeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetIpRange)(nil)).Elem()
}

func (i SubnetIpRangeMap) ToSubnetIpRangeMapOutput() SubnetIpRangeMapOutput {
	return i.ToSubnetIpRangeMapOutputWithContext(context.Background())
}

func (i SubnetIpRangeMap) ToSubnetIpRangeMapOutputWithContext(ctx context.Context) SubnetIpRangeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetIpRangeMapOutput)
}

type SubnetIpRangeOutput struct{ *pulumi.OutputState }

func (SubnetIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetIpRange)(nil)).Elem()
}

func (o SubnetIpRangeOutput) ToSubnetIpRangeOutput() SubnetIpRangeOutput {
	return o
}

func (o SubnetIpRangeOutput) ToSubnetIpRangeOutputWithContext(ctx context.Context) SubnetIpRangeOutput {
	return o
}

// A description of this range. This argument is computed if it's not set.
func (o SubnetIpRangeOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetIpRange) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// The end IP for the new IP range (inclusive).
func (o SubnetIpRangeOutput) EndIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetIpRange) pulumi.StringOutput { return v.EndIp }).(pulumi.StringOutput)
}

// The start IP for the new IP range (inclusive).
func (o SubnetIpRangeOutput) StartIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetIpRange) pulumi.StringOutput { return v.StartIp }).(pulumi.StringOutput)
}

// The subnet identifier (ID or CIDR) for the new IP range.
func (o SubnetIpRangeOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetIpRange) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

// The IP range type. Valid options are: `dynamic`, `reserved`.
func (o SubnetIpRangeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SubnetIpRange) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type SubnetIpRangeArrayOutput struct{ *pulumi.OutputState }

func (SubnetIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubnetIpRange)(nil)).Elem()
}

func (o SubnetIpRangeArrayOutput) ToSubnetIpRangeArrayOutput() SubnetIpRangeArrayOutput {
	return o
}

func (o SubnetIpRangeArrayOutput) ToSubnetIpRangeArrayOutputWithContext(ctx context.Context) SubnetIpRangeArrayOutput {
	return o
}

func (o SubnetIpRangeArrayOutput) Index(i pulumi.IntInput) SubnetIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubnetIpRange {
		return vs[0].([]*SubnetIpRange)[vs[1].(int)]
	}).(SubnetIpRangeOutput)
}

type SubnetIpRangeMapOutput struct{ *pulumi.OutputState }

func (SubnetIpRangeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubnetIpRange)(nil)).Elem()
}

func (o SubnetIpRangeMapOutput) ToSubnetIpRangeMapOutput() SubnetIpRangeMapOutput {
	return o
}

func (o SubnetIpRangeMapOutput) ToSubnetIpRangeMapOutputWithContext(ctx context.Context) SubnetIpRangeMapOutput {
	return o
}

func (o SubnetIpRangeMapOutput) MapIndex(k pulumi.StringInput) SubnetIpRangeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubnetIpRange {
		return vs[0].(map[string]*SubnetIpRange)[vs[1].(string)]
	}).(SubnetIpRangeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetIpRangeInput)(nil)).Elem(), &SubnetIpRange{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetIpRangeArrayInput)(nil)).Elem(), SubnetIpRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetIpRangeMapInput)(nil)).Elem(), SubnetIpRangeMap{})
	pulumi.RegisterOutputType(SubnetIpRangeOutput{})
	pulumi.RegisterOutputType(SubnetIpRangeArrayOutput{})
	pulumi.RegisterOutputType(SubnetIpRangeMapOutput{})
}
