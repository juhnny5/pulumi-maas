// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maas

import (
	"context"
	"reflect"

	"github.com/juhnny5/pulumi-maas/sdk/go/maas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DnsDomain struct {
	pulumi.CustomResourceState

	// Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
	Authoritative pulumi.BoolPtrOutput `pulumi:"authoritative"`
	// Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// The name of the new DNS domain.
	Name pulumi.StringOutput `pulumi:"name"`
	// The default TTL for the new DNS domain.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
}

// NewDnsDomain registers a new resource with the given unique name, arguments, and options.
func NewDnsDomain(ctx *pulumi.Context,
	name string, args *DnsDomainArgs, opts ...pulumi.ResourceOption) (*DnsDomain, error) {
	if args == nil {
		args = &DnsDomainArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsDomain
	err := ctx.RegisterResource("maas:index/dnsDomain:DnsDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsDomain gets an existing DnsDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsDomainState, opts ...pulumi.ResourceOption) (*DnsDomain, error) {
	var resource DnsDomain
	err := ctx.ReadResource("maas:index/dnsDomain:DnsDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsDomain resources.
type dnsDomainState struct {
	// Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
	Authoritative *bool `pulumi:"authoritative"`
	// Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
	IsDefault *bool `pulumi:"isDefault"`
	// The name of the new DNS domain.
	Name *string `pulumi:"name"`
	// The default TTL for the new DNS domain.
	Ttl *int `pulumi:"ttl"`
}

type DnsDomainState struct {
	// Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
	Authoritative pulumi.BoolPtrInput
	// Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
	IsDefault pulumi.BoolPtrInput
	// The name of the new DNS domain.
	Name pulumi.StringPtrInput
	// The default TTL for the new DNS domain.
	Ttl pulumi.IntPtrInput
}

func (DnsDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsDomainState)(nil)).Elem()
}

type dnsDomainArgs struct {
	// Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
	Authoritative *bool `pulumi:"authoritative"`
	// Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
	IsDefault *bool `pulumi:"isDefault"`
	// The name of the new DNS domain.
	Name *string `pulumi:"name"`
	// The default TTL for the new DNS domain.
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a DnsDomain resource.
type DnsDomainArgs struct {
	// Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
	Authoritative pulumi.BoolPtrInput
	// Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
	IsDefault pulumi.BoolPtrInput
	// The name of the new DNS domain.
	Name pulumi.StringPtrInput
	// The default TTL for the new DNS domain.
	Ttl pulumi.IntPtrInput
}

func (DnsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsDomainArgs)(nil)).Elem()
}

type DnsDomainInput interface {
	pulumi.Input

	ToDnsDomainOutput() DnsDomainOutput
	ToDnsDomainOutputWithContext(ctx context.Context) DnsDomainOutput
}

func (*DnsDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsDomain)(nil)).Elem()
}

func (i *DnsDomain) ToDnsDomainOutput() DnsDomainOutput {
	return i.ToDnsDomainOutputWithContext(context.Background())
}

func (i *DnsDomain) ToDnsDomainOutputWithContext(ctx context.Context) DnsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsDomainOutput)
}

// DnsDomainArrayInput is an input type that accepts DnsDomainArray and DnsDomainArrayOutput values.
// You can construct a concrete instance of `DnsDomainArrayInput` via:
//
//	DnsDomainArray{ DnsDomainArgs{...} }
type DnsDomainArrayInput interface {
	pulumi.Input

	ToDnsDomainArrayOutput() DnsDomainArrayOutput
	ToDnsDomainArrayOutputWithContext(context.Context) DnsDomainArrayOutput
}

type DnsDomainArray []DnsDomainInput

func (DnsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsDomain)(nil)).Elem()
}

func (i DnsDomainArray) ToDnsDomainArrayOutput() DnsDomainArrayOutput {
	return i.ToDnsDomainArrayOutputWithContext(context.Background())
}

func (i DnsDomainArray) ToDnsDomainArrayOutputWithContext(ctx context.Context) DnsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsDomainArrayOutput)
}

// DnsDomainMapInput is an input type that accepts DnsDomainMap and DnsDomainMapOutput values.
// You can construct a concrete instance of `DnsDomainMapInput` via:
//
//	DnsDomainMap{ "key": DnsDomainArgs{...} }
type DnsDomainMapInput interface {
	pulumi.Input

	ToDnsDomainMapOutput() DnsDomainMapOutput
	ToDnsDomainMapOutputWithContext(context.Context) DnsDomainMapOutput
}

type DnsDomainMap map[string]DnsDomainInput

func (DnsDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsDomain)(nil)).Elem()
}

func (i DnsDomainMap) ToDnsDomainMapOutput() DnsDomainMapOutput {
	return i.ToDnsDomainMapOutputWithContext(context.Background())
}

func (i DnsDomainMap) ToDnsDomainMapOutputWithContext(ctx context.Context) DnsDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsDomainMapOutput)
}

type DnsDomainOutput struct{ *pulumi.OutputState }

func (DnsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsDomain)(nil)).Elem()
}

func (o DnsDomainOutput) ToDnsDomainOutput() DnsDomainOutput {
	return o
}

func (o DnsDomainOutput) ToDnsDomainOutputWithContext(ctx context.Context) DnsDomainOutput {
	return o
}

// Boolean value indicating if the new DNS domain is authoritative. Defaults to `false`.
func (o DnsDomainOutput) Authoritative() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsDomain) pulumi.BoolPtrOutput { return v.Authoritative }).(pulumi.BoolPtrOutput)
}

// Boolean value indicating if the new DNS domain will be set as the default in the MAAS environment. Defaults to `false`.
func (o DnsDomainOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsDomain) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The name of the new DNS domain.
func (o DnsDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The default TTL for the new DNS domain.
func (o DnsDomainOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsDomain) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

type DnsDomainArrayOutput struct{ *pulumi.OutputState }

func (DnsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsDomain)(nil)).Elem()
}

func (o DnsDomainArrayOutput) ToDnsDomainArrayOutput() DnsDomainArrayOutput {
	return o
}

func (o DnsDomainArrayOutput) ToDnsDomainArrayOutputWithContext(ctx context.Context) DnsDomainArrayOutput {
	return o
}

func (o DnsDomainArrayOutput) Index(i pulumi.IntInput) DnsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsDomain {
		return vs[0].([]*DnsDomain)[vs[1].(int)]
	}).(DnsDomainOutput)
}

type DnsDomainMapOutput struct{ *pulumi.OutputState }

func (DnsDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsDomain)(nil)).Elem()
}

func (o DnsDomainMapOutput) ToDnsDomainMapOutput() DnsDomainMapOutput {
	return o
}

func (o DnsDomainMapOutput) ToDnsDomainMapOutputWithContext(ctx context.Context) DnsDomainMapOutput {
	return o
}

func (o DnsDomainMapOutput) MapIndex(k pulumi.StringInput) DnsDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsDomain {
		return vs[0].(map[string]*DnsDomain)[vs[1].(string)]
	}).(DnsDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsDomainInput)(nil)).Elem(), &DnsDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsDomainArrayInput)(nil)).Elem(), DnsDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsDomainMapInput)(nil)).Elem(), DnsDomainMap{})
	pulumi.RegisterOutputType(DnsDomainOutput{})
	pulumi.RegisterOutputType(DnsDomainArrayOutput{})
	pulumi.RegisterOutputType(DnsDomainMapOutput{})
}
