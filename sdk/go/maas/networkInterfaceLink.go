// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maas

import (
	"context"
	"reflect"

	"errors"
	"github.com/juhnny5/pulumi-maas/sdk/go/maas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkInterfaceLink struct {
	pulumi.CustomResourceState

	// Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
	// belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
	DefaultGateway pulumi.BoolPtrOutput `pulumi:"defaultGateway"`
	// Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
	// `STATIC`.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
	Machine pulumi.StringOutput `pulumi:"machine"`
	// Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
	// subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
	// `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The identifier (MAC address, name, or ID) of the network interface.
	NetworkInterface pulumi.StringOutput `pulumi:"networkInterface"`
	// The identifier (CIDR or ID) of the subnet to be connected.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
}

// NewNetworkInterfaceLink registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterfaceLink(ctx *pulumi.Context,
	name string, args *NetworkInterfaceLinkArgs, opts ...pulumi.ResourceOption) (*NetworkInterfaceLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Machine == nil {
		return nil, errors.New("invalid value for required argument 'Machine'")
	}
	if args.NetworkInterface == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterface'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkInterfaceLink
	err := ctx.RegisterResource("maas:index/networkInterfaceLink:NetworkInterfaceLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterfaceLink gets an existing NetworkInterfaceLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterfaceLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceLinkState, opts ...pulumi.ResourceOption) (*NetworkInterfaceLink, error) {
	var resource NetworkInterfaceLink
	err := ctx.ReadResource("maas:index/networkInterfaceLink:NetworkInterfaceLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterfaceLink resources.
type networkInterfaceLinkState struct {
	// Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
	// belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
	DefaultGateway *bool `pulumi:"defaultGateway"`
	// Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
	// `STATIC`.
	IpAddress *string `pulumi:"ipAddress"`
	// The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
	Machine *string `pulumi:"machine"`
	// Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
	// subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
	// `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
	Mode *string `pulumi:"mode"`
	// The identifier (MAC address, name, or ID) of the network interface.
	NetworkInterface *string `pulumi:"networkInterface"`
	// The identifier (CIDR or ID) of the subnet to be connected.
	Subnet *string `pulumi:"subnet"`
}

type NetworkInterfaceLinkState struct {
	// Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
	// belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
	DefaultGateway pulumi.BoolPtrInput
	// Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
	// `STATIC`.
	IpAddress pulumi.StringPtrInput
	// The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
	Machine pulumi.StringPtrInput
	// Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
	// subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
	// `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
	Mode pulumi.StringPtrInput
	// The identifier (MAC address, name, or ID) of the network interface.
	NetworkInterface pulumi.StringPtrInput
	// The identifier (CIDR or ID) of the subnet to be connected.
	Subnet pulumi.StringPtrInput
}

func (NetworkInterfaceLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceLinkState)(nil)).Elem()
}

type networkInterfaceLinkArgs struct {
	// Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
	// belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
	DefaultGateway *bool `pulumi:"defaultGateway"`
	// Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
	// `STATIC`.
	IpAddress *string `pulumi:"ipAddress"`
	// The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
	Machine string `pulumi:"machine"`
	// Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
	// subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
	// `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
	Mode *string `pulumi:"mode"`
	// The identifier (MAC address, name, or ID) of the network interface.
	NetworkInterface string `pulumi:"networkInterface"`
	// The identifier (CIDR or ID) of the subnet to be connected.
	Subnet string `pulumi:"subnet"`
}

// The set of arguments for constructing a NetworkInterfaceLink resource.
type NetworkInterfaceLinkArgs struct {
	// Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
	// belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
	DefaultGateway pulumi.BoolPtrInput
	// Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
	// `STATIC`.
	IpAddress pulumi.StringPtrInput
	// The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
	Machine pulumi.StringInput
	// Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
	// subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
	// `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
	Mode pulumi.StringPtrInput
	// The identifier (MAC address, name, or ID) of the network interface.
	NetworkInterface pulumi.StringInput
	// The identifier (CIDR or ID) of the subnet to be connected.
	Subnet pulumi.StringInput
}

func (NetworkInterfaceLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceLinkArgs)(nil)).Elem()
}

type NetworkInterfaceLinkInput interface {
	pulumi.Input

	ToNetworkInterfaceLinkOutput() NetworkInterfaceLinkOutput
	ToNetworkInterfaceLinkOutputWithContext(ctx context.Context) NetworkInterfaceLinkOutput
}

func (*NetworkInterfaceLink) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfaceLink)(nil)).Elem()
}

func (i *NetworkInterfaceLink) ToNetworkInterfaceLinkOutput() NetworkInterfaceLinkOutput {
	return i.ToNetworkInterfaceLinkOutputWithContext(context.Background())
}

func (i *NetworkInterfaceLink) ToNetworkInterfaceLinkOutputWithContext(ctx context.Context) NetworkInterfaceLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceLinkOutput)
}

// NetworkInterfaceLinkArrayInput is an input type that accepts NetworkInterfaceLinkArray and NetworkInterfaceLinkArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceLinkArrayInput` via:
//
//	NetworkInterfaceLinkArray{ NetworkInterfaceLinkArgs{...} }
type NetworkInterfaceLinkArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceLinkArrayOutput() NetworkInterfaceLinkArrayOutput
	ToNetworkInterfaceLinkArrayOutputWithContext(context.Context) NetworkInterfaceLinkArrayOutput
}

type NetworkInterfaceLinkArray []NetworkInterfaceLinkInput

func (NetworkInterfaceLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterfaceLink)(nil)).Elem()
}

func (i NetworkInterfaceLinkArray) ToNetworkInterfaceLinkArrayOutput() NetworkInterfaceLinkArrayOutput {
	return i.ToNetworkInterfaceLinkArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceLinkArray) ToNetworkInterfaceLinkArrayOutputWithContext(ctx context.Context) NetworkInterfaceLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceLinkArrayOutput)
}

// NetworkInterfaceLinkMapInput is an input type that accepts NetworkInterfaceLinkMap and NetworkInterfaceLinkMapOutput values.
// You can construct a concrete instance of `NetworkInterfaceLinkMapInput` via:
//
//	NetworkInterfaceLinkMap{ "key": NetworkInterfaceLinkArgs{...} }
type NetworkInterfaceLinkMapInput interface {
	pulumi.Input

	ToNetworkInterfaceLinkMapOutput() NetworkInterfaceLinkMapOutput
	ToNetworkInterfaceLinkMapOutputWithContext(context.Context) NetworkInterfaceLinkMapOutput
}

type NetworkInterfaceLinkMap map[string]NetworkInterfaceLinkInput

func (NetworkInterfaceLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterfaceLink)(nil)).Elem()
}

func (i NetworkInterfaceLinkMap) ToNetworkInterfaceLinkMapOutput() NetworkInterfaceLinkMapOutput {
	return i.ToNetworkInterfaceLinkMapOutputWithContext(context.Background())
}

func (i NetworkInterfaceLinkMap) ToNetworkInterfaceLinkMapOutputWithContext(ctx context.Context) NetworkInterfaceLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceLinkMapOutput)
}

type NetworkInterfaceLinkOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfaceLink)(nil)).Elem()
}

func (o NetworkInterfaceLinkOutput) ToNetworkInterfaceLinkOutput() NetworkInterfaceLinkOutput {
	return o
}

func (o NetworkInterfaceLinkOutput) ToNetworkInterfaceLinkOutputWithContext(ctx context.Context) NetworkInterfaceLinkOutput {
	return o
}

// Boolean value. When enabled, it sets the subnet gateway IP address as the default gateway for the machine the interface
// belongs to. This option can only be used with the `AUTO` and `STATIC` modes. Defaults to `false`.
func (o NetworkInterfaceLinkOutput) DefaultGateway() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkInterfaceLink) pulumi.BoolPtrOutput { return v.DefaultGateway }).(pulumi.BoolPtrOutput)
}

// Valid IP address (from the given subnet) to be configured on the network interface. Only used when `mode` is set to
// `STATIC`.
func (o NetworkInterfaceLinkOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfaceLink) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// The identifier (system ID, hostname, or FQDN) of the machine with the network interface.
func (o NetworkInterfaceLinkOutput) Machine() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfaceLink) pulumi.StringOutput { return v.Machine }).(pulumi.StringOutput)
}

// Connection mode to subnet. It defaults to `AUTO`. Valid options are: * `AUTO` - Random static IP address from the
// subnet. * `DHCP` - IP address from the DHCP on the given subnet. * `STATIC` - Use `ip_address` as static IP address. *
// `LINK_UP` - Bring the interface up only on the given subnet. No IP address will be assigned.
func (o NetworkInterfaceLinkOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkInterfaceLink) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The identifier (MAC address, name, or ID) of the network interface.
func (o NetworkInterfaceLinkOutput) NetworkInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfaceLink) pulumi.StringOutput { return v.NetworkInterface }).(pulumi.StringOutput)
}

// The identifier (CIDR or ID) of the subnet to be connected.
func (o NetworkInterfaceLinkOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfaceLink) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

type NetworkInterfaceLinkArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterfaceLink)(nil)).Elem()
}

func (o NetworkInterfaceLinkArrayOutput) ToNetworkInterfaceLinkArrayOutput() NetworkInterfaceLinkArrayOutput {
	return o
}

func (o NetworkInterfaceLinkArrayOutput) ToNetworkInterfaceLinkArrayOutputWithContext(ctx context.Context) NetworkInterfaceLinkArrayOutput {
	return o
}

func (o NetworkInterfaceLinkArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkInterfaceLink {
		return vs[0].([]*NetworkInterfaceLink)[vs[1].(int)]
	}).(NetworkInterfaceLinkOutput)
}

type NetworkInterfaceLinkMapOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterfaceLink)(nil)).Elem()
}

func (o NetworkInterfaceLinkMapOutput) ToNetworkInterfaceLinkMapOutput() NetworkInterfaceLinkMapOutput {
	return o
}

func (o NetworkInterfaceLinkMapOutput) ToNetworkInterfaceLinkMapOutputWithContext(ctx context.Context) NetworkInterfaceLinkMapOutput {
	return o
}

func (o NetworkInterfaceLinkMapOutput) MapIndex(k pulumi.StringInput) NetworkInterfaceLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkInterfaceLink {
		return vs[0].(map[string]*NetworkInterfaceLink)[vs[1].(string)]
	}).(NetworkInterfaceLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceLinkInput)(nil)).Elem(), &NetworkInterfaceLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceLinkArrayInput)(nil)).Elem(), NetworkInterfaceLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceLinkMapInput)(nil)).Elem(), NetworkInterfaceLinkMap{})
	pulumi.RegisterOutputType(NetworkInterfaceLinkOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceLinkArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceLinkMapOutput{})
}
