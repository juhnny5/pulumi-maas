// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maas

import (
	"context"
	"reflect"

	"errors"
	"github.com/juhnny5/pulumi-maas/sdk/go/maas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BlockDevice struct {
	pulumi.CustomResourceState

	// The block size of the block device. Defaults to `512`.
	BlockSize pulumi.IntPtrOutput `pulumi:"blockSize"`
	// Only used if `model` and `serial` cannot be provided. This should be a path that is fixed and doesn't change depending
	// on the boot order or kernel version. This argument is computed if it's not given.
	IdPath pulumi.StringOutput `pulumi:"idPath"`
	// Boolean value indicating if the block device is set as the boot device.
	IsBootDevice pulumi.BoolPtrOutput `pulumi:"isBootDevice"`
	// The machine identifier (system ID, hostname, or FQDN) that owns the block device.
	Machine pulumi.StringOutput `pulumi:"machine"`
	// Model of the block device. Used in conjunction with `serial` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Model pulumi.StringOutput `pulumi:"model"`
	// The block device name.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of partition resources created for the new block device. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html). And, it is computed if it's
	// not given.
	Partitions BlockDevicePartitionArrayOutput `pulumi:"partitions"`
	// Block device path.
	Path pulumi.StringOutput `pulumi:"path"`
	// Serial number of the block device. Used in conjunction with `model` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Serial pulumi.StringOutput `pulumi:"serial"`
	// The size of the block device (given in GB).
	SizeGigabytes pulumi.IntOutput         `pulumi:"sizeGigabytes"`
	Tags          pulumi.StringArrayOutput `pulumi:"tags"`
	// Block device UUID.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewBlockDevice registers a new resource with the given unique name, arguments, and options.
func NewBlockDevice(ctx *pulumi.Context,
	name string, args *BlockDeviceArgs, opts ...pulumi.ResourceOption) (*BlockDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Machine == nil {
		return nil, errors.New("invalid value for required argument 'Machine'")
	}
	if args.SizeGigabytes == nil {
		return nil, errors.New("invalid value for required argument 'SizeGigabytes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BlockDevice
	err := ctx.RegisterResource("maas:index/blockDevice:BlockDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockDevice gets an existing BlockDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockDeviceState, opts ...pulumi.ResourceOption) (*BlockDevice, error) {
	var resource BlockDevice
	err := ctx.ReadResource("maas:index/blockDevice:BlockDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockDevice resources.
type blockDeviceState struct {
	// The block size of the block device. Defaults to `512`.
	BlockSize *int `pulumi:"blockSize"`
	// Only used if `model` and `serial` cannot be provided. This should be a path that is fixed and doesn't change depending
	// on the boot order or kernel version. This argument is computed if it's not given.
	IdPath *string `pulumi:"idPath"`
	// Boolean value indicating if the block device is set as the boot device.
	IsBootDevice *bool `pulumi:"isBootDevice"`
	// The machine identifier (system ID, hostname, or FQDN) that owns the block device.
	Machine *string `pulumi:"machine"`
	// Model of the block device. Used in conjunction with `serial` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Model *string `pulumi:"model"`
	// The block device name.
	Name *string `pulumi:"name"`
	// List of partition resources created for the new block device. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html). And, it is computed if it's
	// not given.
	Partitions []BlockDevicePartition `pulumi:"partitions"`
	// Block device path.
	Path *string `pulumi:"path"`
	// Serial number of the block device. Used in conjunction with `model` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Serial *string `pulumi:"serial"`
	// The size of the block device (given in GB).
	SizeGigabytes *int     `pulumi:"sizeGigabytes"`
	Tags          []string `pulumi:"tags"`
	// Block device UUID.
	Uuid *string `pulumi:"uuid"`
}

type BlockDeviceState struct {
	// The block size of the block device. Defaults to `512`.
	BlockSize pulumi.IntPtrInput
	// Only used if `model` and `serial` cannot be provided. This should be a path that is fixed and doesn't change depending
	// on the boot order or kernel version. This argument is computed if it's not given.
	IdPath pulumi.StringPtrInput
	// Boolean value indicating if the block device is set as the boot device.
	IsBootDevice pulumi.BoolPtrInput
	// The machine identifier (system ID, hostname, or FQDN) that owns the block device.
	Machine pulumi.StringPtrInput
	// Model of the block device. Used in conjunction with `serial` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Model pulumi.StringPtrInput
	// The block device name.
	Name pulumi.StringPtrInput
	// List of partition resources created for the new block device. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html). And, it is computed if it's
	// not given.
	Partitions BlockDevicePartitionArrayInput
	// Block device path.
	Path pulumi.StringPtrInput
	// Serial number of the block device. Used in conjunction with `model` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Serial pulumi.StringPtrInput
	// The size of the block device (given in GB).
	SizeGigabytes pulumi.IntPtrInput
	Tags          pulumi.StringArrayInput
	// Block device UUID.
	Uuid pulumi.StringPtrInput
}

func (BlockDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockDeviceState)(nil)).Elem()
}

type blockDeviceArgs struct {
	// The block size of the block device. Defaults to `512`.
	BlockSize *int `pulumi:"blockSize"`
	// Only used if `model` and `serial` cannot be provided. This should be a path that is fixed and doesn't change depending
	// on the boot order or kernel version. This argument is computed if it's not given.
	IdPath *string `pulumi:"idPath"`
	// Boolean value indicating if the block device is set as the boot device.
	IsBootDevice *bool `pulumi:"isBootDevice"`
	// The machine identifier (system ID, hostname, or FQDN) that owns the block device.
	Machine string `pulumi:"machine"`
	// Model of the block device. Used in conjunction with `serial` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Model *string `pulumi:"model"`
	// The block device name.
	Name *string `pulumi:"name"`
	// List of partition resources created for the new block device. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html). And, it is computed if it's
	// not given.
	Partitions []BlockDevicePartition `pulumi:"partitions"`
	// Serial number of the block device. Used in conjunction with `model` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Serial *string `pulumi:"serial"`
	// The size of the block device (given in GB).
	SizeGigabytes int      `pulumi:"sizeGigabytes"`
	Tags          []string `pulumi:"tags"`
}

// The set of arguments for constructing a BlockDevice resource.
type BlockDeviceArgs struct {
	// The block size of the block device. Defaults to `512`.
	BlockSize pulumi.IntPtrInput
	// Only used if `model` and `serial` cannot be provided. This should be a path that is fixed and doesn't change depending
	// on the boot order or kernel version. This argument is computed if it's not given.
	IdPath pulumi.StringPtrInput
	// Boolean value indicating if the block device is set as the boot device.
	IsBootDevice pulumi.BoolPtrInput
	// The machine identifier (system ID, hostname, or FQDN) that owns the block device.
	Machine pulumi.StringInput
	// Model of the block device. Used in conjunction with `serial` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Model pulumi.StringPtrInput
	// The block device name.
	Name pulumi.StringPtrInput
	// List of partition resources created for the new block device. Parameters defined below. This argument is processed in
	// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html). And, it is computed if it's
	// not given.
	Partitions BlockDevicePartitionArrayInput
	// Serial number of the block device. Used in conjunction with `model` argument. Conflicts with `id_path`. This argument is
	// computed if it's not given.
	Serial pulumi.StringPtrInput
	// The size of the block device (given in GB).
	SizeGigabytes pulumi.IntInput
	Tags          pulumi.StringArrayInput
}

func (BlockDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockDeviceArgs)(nil)).Elem()
}

type BlockDeviceInput interface {
	pulumi.Input

	ToBlockDeviceOutput() BlockDeviceOutput
	ToBlockDeviceOutputWithContext(ctx context.Context) BlockDeviceOutput
}

func (*BlockDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockDevice)(nil)).Elem()
}

func (i *BlockDevice) ToBlockDeviceOutput() BlockDeviceOutput {
	return i.ToBlockDeviceOutputWithContext(context.Background())
}

func (i *BlockDevice) ToBlockDeviceOutputWithContext(ctx context.Context) BlockDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockDeviceOutput)
}

// BlockDeviceArrayInput is an input type that accepts BlockDeviceArray and BlockDeviceArrayOutput values.
// You can construct a concrete instance of `BlockDeviceArrayInput` via:
//
//	BlockDeviceArray{ BlockDeviceArgs{...} }
type BlockDeviceArrayInput interface {
	pulumi.Input

	ToBlockDeviceArrayOutput() BlockDeviceArrayOutput
	ToBlockDeviceArrayOutputWithContext(context.Context) BlockDeviceArrayOutput
}

type BlockDeviceArray []BlockDeviceInput

func (BlockDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockDevice)(nil)).Elem()
}

func (i BlockDeviceArray) ToBlockDeviceArrayOutput() BlockDeviceArrayOutput {
	return i.ToBlockDeviceArrayOutputWithContext(context.Background())
}

func (i BlockDeviceArray) ToBlockDeviceArrayOutputWithContext(ctx context.Context) BlockDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockDeviceArrayOutput)
}

// BlockDeviceMapInput is an input type that accepts BlockDeviceMap and BlockDeviceMapOutput values.
// You can construct a concrete instance of `BlockDeviceMapInput` via:
//
//	BlockDeviceMap{ "key": BlockDeviceArgs{...} }
type BlockDeviceMapInput interface {
	pulumi.Input

	ToBlockDeviceMapOutput() BlockDeviceMapOutput
	ToBlockDeviceMapOutputWithContext(context.Context) BlockDeviceMapOutput
}

type BlockDeviceMap map[string]BlockDeviceInput

func (BlockDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockDevice)(nil)).Elem()
}

func (i BlockDeviceMap) ToBlockDeviceMapOutput() BlockDeviceMapOutput {
	return i.ToBlockDeviceMapOutputWithContext(context.Background())
}

func (i BlockDeviceMap) ToBlockDeviceMapOutputWithContext(ctx context.Context) BlockDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockDeviceMapOutput)
}

type BlockDeviceOutput struct{ *pulumi.OutputState }

func (BlockDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockDevice)(nil)).Elem()
}

func (o BlockDeviceOutput) ToBlockDeviceOutput() BlockDeviceOutput {
	return o
}

func (o BlockDeviceOutput) ToBlockDeviceOutputWithContext(ctx context.Context) BlockDeviceOutput {
	return o
}

// The block size of the block device. Defaults to `512`.
func (o BlockDeviceOutput) BlockSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.IntPtrOutput { return v.BlockSize }).(pulumi.IntPtrOutput)
}

// Only used if `model` and `serial` cannot be provided. This should be a path that is fixed and doesn't change depending
// on the boot order or kernel version. This argument is computed if it's not given.
func (o BlockDeviceOutput) IdPath() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.StringOutput { return v.IdPath }).(pulumi.StringOutput)
}

// Boolean value indicating if the block device is set as the boot device.
func (o BlockDeviceOutput) IsBootDevice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.BoolPtrOutput { return v.IsBootDevice }).(pulumi.BoolPtrOutput)
}

// The machine identifier (system ID, hostname, or FQDN) that owns the block device.
func (o BlockDeviceOutput) Machine() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.StringOutput { return v.Machine }).(pulumi.StringOutput)
}

// Model of the block device. Used in conjunction with `serial` argument. Conflicts with `id_path`. This argument is
// computed if it's not given.
func (o BlockDeviceOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.StringOutput { return v.Model }).(pulumi.StringOutput)
}

// The block device name.
func (o BlockDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of partition resources created for the new block device. Parameters defined below. This argument is processed in
// [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html). And, it is computed if it's
// not given.
func (o BlockDeviceOutput) Partitions() BlockDevicePartitionArrayOutput {
	return o.ApplyT(func(v *BlockDevice) BlockDevicePartitionArrayOutput { return v.Partitions }).(BlockDevicePartitionArrayOutput)
}

// Block device path.
func (o BlockDeviceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Serial number of the block device. Used in conjunction with `model` argument. Conflicts with `id_path`. This argument is
// computed if it's not given.
func (o BlockDeviceOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

// The size of the block device (given in GB).
func (o BlockDeviceOutput) SizeGigabytes() pulumi.IntOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.IntOutput { return v.SizeGigabytes }).(pulumi.IntOutput)
}

func (o BlockDeviceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Block device UUID.
func (o BlockDeviceOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockDevice) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type BlockDeviceArrayOutput struct{ *pulumi.OutputState }

func (BlockDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockDevice)(nil)).Elem()
}

func (o BlockDeviceArrayOutput) ToBlockDeviceArrayOutput() BlockDeviceArrayOutput {
	return o
}

func (o BlockDeviceArrayOutput) ToBlockDeviceArrayOutputWithContext(ctx context.Context) BlockDeviceArrayOutput {
	return o
}

func (o BlockDeviceArrayOutput) Index(i pulumi.IntInput) BlockDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlockDevice {
		return vs[0].([]*BlockDevice)[vs[1].(int)]
	}).(BlockDeviceOutput)
}

type BlockDeviceMapOutput struct{ *pulumi.OutputState }

func (BlockDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockDevice)(nil)).Elem()
}

func (o BlockDeviceMapOutput) ToBlockDeviceMapOutput() BlockDeviceMapOutput {
	return o
}

func (o BlockDeviceMapOutput) ToBlockDeviceMapOutputWithContext(ctx context.Context) BlockDeviceMapOutput {
	return o
}

func (o BlockDeviceMapOutput) MapIndex(k pulumi.StringInput) BlockDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlockDevice {
		return vs[0].(map[string]*BlockDevice)[vs[1].(string)]
	}).(BlockDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockDeviceInput)(nil)).Elem(), &BlockDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockDeviceArrayInput)(nil)).Elem(), BlockDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockDeviceMapInput)(nil)).Elem(), BlockDeviceMap{})
	pulumi.RegisterOutputType(BlockDeviceOutput{})
	pulumi.RegisterOutputType(BlockDeviceArrayOutput{})
	pulumi.RegisterOutputType(BlockDeviceMapOutput{})
}
