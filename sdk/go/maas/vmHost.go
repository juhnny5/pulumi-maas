// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maas

import (
	"context"
	"reflect"

	"errors"
	"github.com/juhnny5/pulumi-maas/sdk/go/maas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VmHost struct {
	pulumi.CustomResourceState

	// The new VM host CPU overcommit ratio. This is computed if it's not set.
	CpuOverCommitRatio pulumi.Float64Output `pulumi:"cpuOverCommitRatio"`
	// The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
	// it's not set.
	DefaultMacvlanMode pulumi.StringOutput `pulumi:"defaultMacvlanMode"`
	// The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
	// registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
	Machine pulumi.StringPtrOutput `pulumi:"machine"`
	// The new VM host RAM memory overcommit ratio. This is computed if it's not set.
	MemoryOverCommitRatio pulumi.Float64Output `pulumi:"memoryOverCommitRatio"`
	// The new VM host name. This is computed if it's not set.
	Name pulumi.StringOutput `pulumi:"name"`
	// The new VM host pool name. This is computed if it's not set.
	Pool pulumi.StringOutput `pulumi:"pool"`
	// Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
	// given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
	PowerAddress pulumi.StringPtrOutput `pulumi:"powerAddress"`
	// User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerPass pulumi.StringPtrOutput `pulumi:"powerPass"`
	// User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerUser pulumi.StringPtrOutput `pulumi:"powerUser"`
	// The VM host total number of CPU cores.
	ResourcesCoresTotal pulumi.IntOutput `pulumi:"resourcesCoresTotal"`
	// The VM host total local storage (in bytes).
	ResourcesLocalStorageTotal pulumi.IntOutput `pulumi:"resourcesLocalStorageTotal"`
	// The VM host total RAM memory (in MB).
	ResourcesMemoryTotal pulumi.IntOutput `pulumi:"resourcesMemoryTotal"`
	// A set of tag names to assign to the new VM host. This is computed if it's not set.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The VM host type. Supported values are: `lxd`, `virsh`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The new VM host zone name. This is computed if it's not set.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewVmHost registers a new resource with the given unique name, arguments, and options.
func NewVmHost(ctx *pulumi.Context,
	name string, args *VmHostArgs, opts ...pulumi.ResourceOption) (*VmHost, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.PowerPass != nil {
		args.PowerPass = pulumi.ToSecret(args.PowerPass).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"powerPass",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmHost
	err := ctx.RegisterResource("maas:index/vmHost:VmHost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmHost gets an existing VmHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmHostState, opts ...pulumi.ResourceOption) (*VmHost, error) {
	var resource VmHost
	err := ctx.ReadResource("maas:index/vmHost:VmHost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmHost resources.
type vmHostState struct {
	// The new VM host CPU overcommit ratio. This is computed if it's not set.
	CpuOverCommitRatio *float64 `pulumi:"cpuOverCommitRatio"`
	// The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
	// it's not set.
	DefaultMacvlanMode *string `pulumi:"defaultMacvlanMode"`
	// The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
	// registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
	Machine *string `pulumi:"machine"`
	// The new VM host RAM memory overcommit ratio. This is computed if it's not set.
	MemoryOverCommitRatio *float64 `pulumi:"memoryOverCommitRatio"`
	// The new VM host name. This is computed if it's not set.
	Name *string `pulumi:"name"`
	// The new VM host pool name. This is computed if it's not set.
	Pool *string `pulumi:"pool"`
	// Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
	// given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
	PowerAddress *string `pulumi:"powerAddress"`
	// User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerPass *string `pulumi:"powerPass"`
	// User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerUser *string `pulumi:"powerUser"`
	// The VM host total number of CPU cores.
	ResourcesCoresTotal *int `pulumi:"resourcesCoresTotal"`
	// The VM host total local storage (in bytes).
	ResourcesLocalStorageTotal *int `pulumi:"resourcesLocalStorageTotal"`
	// The VM host total RAM memory (in MB).
	ResourcesMemoryTotal *int `pulumi:"resourcesMemoryTotal"`
	// A set of tag names to assign to the new VM host. This is computed if it's not set.
	Tags []string `pulumi:"tags"`
	// The VM host type. Supported values are: `lxd`, `virsh`.
	Type *string `pulumi:"type"`
	// The new VM host zone name. This is computed if it's not set.
	Zone *string `pulumi:"zone"`
}

type VmHostState struct {
	// The new VM host CPU overcommit ratio. This is computed if it's not set.
	CpuOverCommitRatio pulumi.Float64PtrInput
	// The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
	// it's not set.
	DefaultMacvlanMode pulumi.StringPtrInput
	// The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
	// registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
	Machine pulumi.StringPtrInput
	// The new VM host RAM memory overcommit ratio. This is computed if it's not set.
	MemoryOverCommitRatio pulumi.Float64PtrInput
	// The new VM host name. This is computed if it's not set.
	Name pulumi.StringPtrInput
	// The new VM host pool name. This is computed if it's not set.
	Pool pulumi.StringPtrInput
	// Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
	// given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
	PowerAddress pulumi.StringPtrInput
	// User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerPass pulumi.StringPtrInput
	// User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerUser pulumi.StringPtrInput
	// The VM host total number of CPU cores.
	ResourcesCoresTotal pulumi.IntPtrInput
	// The VM host total local storage (in bytes).
	ResourcesLocalStorageTotal pulumi.IntPtrInput
	// The VM host total RAM memory (in MB).
	ResourcesMemoryTotal pulumi.IntPtrInput
	// A set of tag names to assign to the new VM host. This is computed if it's not set.
	Tags pulumi.StringArrayInput
	// The VM host type. Supported values are: `lxd`, `virsh`.
	Type pulumi.StringPtrInput
	// The new VM host zone name. This is computed if it's not set.
	Zone pulumi.StringPtrInput
}

func (VmHostState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmHostState)(nil)).Elem()
}

type vmHostArgs struct {
	// The new VM host CPU overcommit ratio. This is computed if it's not set.
	CpuOverCommitRatio *float64 `pulumi:"cpuOverCommitRatio"`
	// The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
	// it's not set.
	DefaultMacvlanMode *string `pulumi:"defaultMacvlanMode"`
	// The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
	// registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
	Machine *string `pulumi:"machine"`
	// The new VM host RAM memory overcommit ratio. This is computed if it's not set.
	MemoryOverCommitRatio *float64 `pulumi:"memoryOverCommitRatio"`
	// The new VM host name. This is computed if it's not set.
	Name *string `pulumi:"name"`
	// The new VM host pool name. This is computed if it's not set.
	Pool *string `pulumi:"pool"`
	// Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
	// given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
	PowerAddress *string `pulumi:"powerAddress"`
	// User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerPass *string `pulumi:"powerPass"`
	// User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerUser *string `pulumi:"powerUser"`
	// A set of tag names to assign to the new VM host. This is computed if it's not set.
	Tags []string `pulumi:"tags"`
	// The VM host type. Supported values are: `lxd`, `virsh`.
	Type string `pulumi:"type"`
	// The new VM host zone name. This is computed if it's not set.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a VmHost resource.
type VmHostArgs struct {
	// The new VM host CPU overcommit ratio. This is computed if it's not set.
	CpuOverCommitRatio pulumi.Float64PtrInput
	// The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
	// it's not set.
	DefaultMacvlanMode pulumi.StringPtrInput
	// The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
	// registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
	Machine pulumi.StringPtrInput
	// The new VM host RAM memory overcommit ratio. This is computed if it's not set.
	MemoryOverCommitRatio pulumi.Float64PtrInput
	// The new VM host name. This is computed if it's not set.
	Name pulumi.StringPtrInput
	// The new VM host pool name. This is computed if it's not set.
	Pool pulumi.StringPtrInput
	// Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
	// given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
	PowerAddress pulumi.StringPtrInput
	// User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerPass pulumi.StringPtrInput
	// User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
	PowerUser pulumi.StringPtrInput
	// A set of tag names to assign to the new VM host. This is computed if it's not set.
	Tags pulumi.StringArrayInput
	// The VM host type. Supported values are: `lxd`, `virsh`.
	Type pulumi.StringInput
	// The new VM host zone name. This is computed if it's not set.
	Zone pulumi.StringPtrInput
}

func (VmHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmHostArgs)(nil)).Elem()
}

type VmHostInput interface {
	pulumi.Input

	ToVmHostOutput() VmHostOutput
	ToVmHostOutputWithContext(ctx context.Context) VmHostOutput
}

func (*VmHost) ElementType() reflect.Type {
	return reflect.TypeOf((**VmHost)(nil)).Elem()
}

func (i *VmHost) ToVmHostOutput() VmHostOutput {
	return i.ToVmHostOutputWithContext(context.Background())
}

func (i *VmHost) ToVmHostOutputWithContext(ctx context.Context) VmHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmHostOutput)
}

// VmHostArrayInput is an input type that accepts VmHostArray and VmHostArrayOutput values.
// You can construct a concrete instance of `VmHostArrayInput` via:
//
//	VmHostArray{ VmHostArgs{...} }
type VmHostArrayInput interface {
	pulumi.Input

	ToVmHostArrayOutput() VmHostArrayOutput
	ToVmHostArrayOutputWithContext(context.Context) VmHostArrayOutput
}

type VmHostArray []VmHostInput

func (VmHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmHost)(nil)).Elem()
}

func (i VmHostArray) ToVmHostArrayOutput() VmHostArrayOutput {
	return i.ToVmHostArrayOutputWithContext(context.Background())
}

func (i VmHostArray) ToVmHostArrayOutputWithContext(ctx context.Context) VmHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmHostArrayOutput)
}

// VmHostMapInput is an input type that accepts VmHostMap and VmHostMapOutput values.
// You can construct a concrete instance of `VmHostMapInput` via:
//
//	VmHostMap{ "key": VmHostArgs{...} }
type VmHostMapInput interface {
	pulumi.Input

	ToVmHostMapOutput() VmHostMapOutput
	ToVmHostMapOutputWithContext(context.Context) VmHostMapOutput
}

type VmHostMap map[string]VmHostInput

func (VmHostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmHost)(nil)).Elem()
}

func (i VmHostMap) ToVmHostMapOutput() VmHostMapOutput {
	return i.ToVmHostMapOutputWithContext(context.Background())
}

func (i VmHostMap) ToVmHostMapOutputWithContext(ctx context.Context) VmHostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmHostMapOutput)
}

type VmHostOutput struct{ *pulumi.OutputState }

func (VmHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmHost)(nil)).Elem()
}

func (o VmHostOutput) ToVmHostOutput() VmHostOutput {
	return o
}

func (o VmHostOutput) ToVmHostOutputWithContext(ctx context.Context) VmHostOutput {
	return o
}

// The new VM host CPU overcommit ratio. This is computed if it's not set.
func (o VmHostOutput) CpuOverCommitRatio() pulumi.Float64Output {
	return o.ApplyT(func(v *VmHost) pulumi.Float64Output { return v.CpuOverCommitRatio }).(pulumi.Float64Output)
}

// The new VM host default macvlan mode. Supported values are: `bridge`, `passthru`, `private`, `vepa`. This is computed if
// it's not set.
func (o VmHostOutput) DefaultMacvlanMode() pulumi.StringOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringOutput { return v.DefaultMacvlanMode }).(pulumi.StringOutput)
}

// The identifier (hostname, FQDN or system ID) of a registered ready MAAS machine. This is going to be deployed and
// registered as a new VM host. This argument conflicts with: `power_address`, `power_user`, `power_pass`.
func (o VmHostOutput) Machine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringPtrOutput { return v.Machine }).(pulumi.StringPtrOutput)
}

// The new VM host RAM memory overcommit ratio. This is computed if it's not set.
func (o VmHostOutput) MemoryOverCommitRatio() pulumi.Float64Output {
	return o.ApplyT(func(v *VmHost) pulumi.Float64Output { return v.MemoryOverCommitRatio }).(pulumi.Float64Output)
}

// The new VM host name. This is computed if it's not set.
func (o VmHostOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The new VM host pool name. This is computed if it's not set.
func (o VmHostOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringOutput { return v.Pool }).(pulumi.StringOutput)
}

// Address that gives MAAS access to the VM host power control. For example: `qemu+ssh://172.16.99.2/system`. The address
// given here must reachable by the MAAS server. It can't be set if `machine` argument is used.
func (o VmHostOutput) PowerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringPtrOutput { return v.PowerAddress }).(pulumi.StringPtrOutput)
}

// User password to use for power control of the VM host. Cannot be set if `machine` parameter is used.
func (o VmHostOutput) PowerPass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringPtrOutput { return v.PowerPass }).(pulumi.StringPtrOutput)
}

// User name to use for power control of the VM host. Cannot be set if `machine` parameter is used.
func (o VmHostOutput) PowerUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringPtrOutput { return v.PowerUser }).(pulumi.StringPtrOutput)
}

// The VM host total number of CPU cores.
func (o VmHostOutput) ResourcesCoresTotal() pulumi.IntOutput {
	return o.ApplyT(func(v *VmHost) pulumi.IntOutput { return v.ResourcesCoresTotal }).(pulumi.IntOutput)
}

// The VM host total local storage (in bytes).
func (o VmHostOutput) ResourcesLocalStorageTotal() pulumi.IntOutput {
	return o.ApplyT(func(v *VmHost) pulumi.IntOutput { return v.ResourcesLocalStorageTotal }).(pulumi.IntOutput)
}

// The VM host total RAM memory (in MB).
func (o VmHostOutput) ResourcesMemoryTotal() pulumi.IntOutput {
	return o.ApplyT(func(v *VmHost) pulumi.IntOutput { return v.ResourcesMemoryTotal }).(pulumi.IntOutput)
}

// A set of tag names to assign to the new VM host. This is computed if it's not set.
func (o VmHostOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The VM host type. Supported values are: `lxd`, `virsh`.
func (o VmHostOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The new VM host zone name. This is computed if it's not set.
func (o VmHostOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *VmHost) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type VmHostArrayOutput struct{ *pulumi.OutputState }

func (VmHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmHost)(nil)).Elem()
}

func (o VmHostArrayOutput) ToVmHostArrayOutput() VmHostArrayOutput {
	return o
}

func (o VmHostArrayOutput) ToVmHostArrayOutputWithContext(ctx context.Context) VmHostArrayOutput {
	return o
}

func (o VmHostArrayOutput) Index(i pulumi.IntInput) VmHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmHost {
		return vs[0].([]*VmHost)[vs[1].(int)]
	}).(VmHostOutput)
}

type VmHostMapOutput struct{ *pulumi.OutputState }

func (VmHostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmHost)(nil)).Elem()
}

func (o VmHostMapOutput) ToVmHostMapOutput() VmHostMapOutput {
	return o
}

func (o VmHostMapOutput) ToVmHostMapOutputWithContext(ctx context.Context) VmHostMapOutput {
	return o
}

func (o VmHostMapOutput) MapIndex(k pulumi.StringInput) VmHostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmHost {
		return vs[0].(map[string]*VmHost)[vs[1].(string)]
	}).(VmHostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmHostInput)(nil)).Elem(), &VmHost{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmHostArrayInput)(nil)).Elem(), VmHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmHostMapInput)(nil)).Elem(), VmHostMap{})
	pulumi.RegisterOutputType(VmHostOutput{})
	pulumi.RegisterOutputType(VmHostArrayOutput{})
	pulumi.RegisterOutputType(VmHostMapOutput{})
}
