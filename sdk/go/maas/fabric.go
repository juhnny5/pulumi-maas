// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maas

import (
	"context"
	"reflect"

	"github.com/juhnny5/pulumi-maas/sdk/go/maas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Fabric struct {
	pulumi.CustomResourceState

	// The fabric name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewFabric registers a new resource with the given unique name, arguments, and options.
func NewFabric(ctx *pulumi.Context,
	name string, args *FabricArgs, opts ...pulumi.ResourceOption) (*Fabric, error) {
	if args == nil {
		args = &FabricArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fabric
	err := ctx.RegisterResource("maas:index/fabric:Fabric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFabric gets an existing Fabric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFabric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FabricState, opts ...pulumi.ResourceOption) (*Fabric, error) {
	var resource Fabric
	err := ctx.ReadResource("maas:index/fabric:Fabric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fabric resources.
type fabricState struct {
	// The fabric name.
	Name *string `pulumi:"name"`
}

type FabricState struct {
	// The fabric name.
	Name pulumi.StringPtrInput
}

func (FabricState) ElementType() reflect.Type {
	return reflect.TypeOf((*fabricState)(nil)).Elem()
}

type fabricArgs struct {
	// The fabric name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Fabric resource.
type FabricArgs struct {
	// The fabric name.
	Name pulumi.StringPtrInput
}

func (FabricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fabricArgs)(nil)).Elem()
}

type FabricInput interface {
	pulumi.Input

	ToFabricOutput() FabricOutput
	ToFabricOutputWithContext(ctx context.Context) FabricOutput
}

func (*Fabric) ElementType() reflect.Type {
	return reflect.TypeOf((**Fabric)(nil)).Elem()
}

func (i *Fabric) ToFabricOutput() FabricOutput {
	return i.ToFabricOutputWithContext(context.Background())
}

func (i *Fabric) ToFabricOutputWithContext(ctx context.Context) FabricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricOutput)
}

// FabricArrayInput is an input type that accepts FabricArray and FabricArrayOutput values.
// You can construct a concrete instance of `FabricArrayInput` via:
//
//	FabricArray{ FabricArgs{...} }
type FabricArrayInput interface {
	pulumi.Input

	ToFabricArrayOutput() FabricArrayOutput
	ToFabricArrayOutputWithContext(context.Context) FabricArrayOutput
}

type FabricArray []FabricInput

func (FabricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fabric)(nil)).Elem()
}

func (i FabricArray) ToFabricArrayOutput() FabricArrayOutput {
	return i.ToFabricArrayOutputWithContext(context.Background())
}

func (i FabricArray) ToFabricArrayOutputWithContext(ctx context.Context) FabricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricArrayOutput)
}

// FabricMapInput is an input type that accepts FabricMap and FabricMapOutput values.
// You can construct a concrete instance of `FabricMapInput` via:
//
//	FabricMap{ "key": FabricArgs{...} }
type FabricMapInput interface {
	pulumi.Input

	ToFabricMapOutput() FabricMapOutput
	ToFabricMapOutputWithContext(context.Context) FabricMapOutput
}

type FabricMap map[string]FabricInput

func (FabricMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fabric)(nil)).Elem()
}

func (i FabricMap) ToFabricMapOutput() FabricMapOutput {
	return i.ToFabricMapOutputWithContext(context.Background())
}

func (i FabricMap) ToFabricMapOutputWithContext(ctx context.Context) FabricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricMapOutput)
}

type FabricOutput struct{ *pulumi.OutputState }

func (FabricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fabric)(nil)).Elem()
}

func (o FabricOutput) ToFabricOutput() FabricOutput {
	return o
}

func (o FabricOutput) ToFabricOutputWithContext(ctx context.Context) FabricOutput {
	return o
}

// The fabric name.
func (o FabricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Fabric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type FabricArrayOutput struct{ *pulumi.OutputState }

func (FabricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fabric)(nil)).Elem()
}

func (o FabricArrayOutput) ToFabricArrayOutput() FabricArrayOutput {
	return o
}

func (o FabricArrayOutput) ToFabricArrayOutputWithContext(ctx context.Context) FabricArrayOutput {
	return o
}

func (o FabricArrayOutput) Index(i pulumi.IntInput) FabricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fabric {
		return vs[0].([]*Fabric)[vs[1].(int)]
	}).(FabricOutput)
}

type FabricMapOutput struct{ *pulumi.OutputState }

func (FabricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fabric)(nil)).Elem()
}

func (o FabricMapOutput) ToFabricMapOutput() FabricMapOutput {
	return o
}

func (o FabricMapOutput) ToFabricMapOutputWithContext(ctx context.Context) FabricMapOutput {
	return o
}

func (o FabricMapOutput) MapIndex(k pulumi.StringInput) FabricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fabric {
		return vs[0].(map[string]*Fabric)[vs[1].(string)]
	}).(FabricOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FabricInput)(nil)).Elem(), &Fabric{})
	pulumi.RegisterInputType(reflect.TypeOf((*FabricArrayInput)(nil)).Elem(), FabricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FabricMapInput)(nil)).Elem(), FabricMap{})
	pulumi.RegisterOutputType(FabricOutput{})
	pulumi.RegisterOutputType(FabricArrayOutput{})
	pulumi.RegisterOutputType(FabricMapOutput{})
}
