// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package maas

import (
	"context"
	"reflect"

	"github.com/juhnny5/pulumi-maas/sdk/go/maas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetResult
	err := ctx.Invoke("maas:index/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	Cidr string `pulumi:"cidr"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	AllowDns   bool     `pulumi:"allowDns"`
	AllowProxy bool     `pulumi:"allowProxy"`
	Cidr       string   `pulumi:"cidr"`
	DnsServers []string `pulumi:"dnsServers"`
	Fabric     string   `pulumi:"fabric"`
	GatewayIp  string   `pulumi:"gatewayIp"`
	// The provider-assigned unique ID for this managed resource.
	Id       string `pulumi:"id"`
	Name     string `pulumi:"name"`
	RdnsMode int    `pulumi:"rdnsMode"`
	Vid      int    `pulumi:"vid"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubnetResult, error) {
			args := v.(LookupSubnetArgs)
			r, err := LookupSubnet(ctx, &args, opts...)
			var s LookupSubnetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	Cidr pulumi.StringInput `pulumi:"cidr"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) AllowDns() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.AllowDns }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) AllowProxy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.AllowProxy }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Cidr }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

func (o LookupSubnetResultOutput) Fabric() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Fabric }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) RdnsMode() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.RdnsMode }).(pulumi.IntOutput)
}

func (o LookupSubnetResultOutput) Vid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.Vid }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}
